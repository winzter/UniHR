import 'dart:convert';
import '../../domain/entities/entities.dart';

List<LeaveRequestManagerModel> leaveRequestManagerFromJson(String str) =>
    List<LeaveRequestManagerModel>.from(
        json.decode(str).map((x) => LeaveRequestManagerModel.fromJson(x)));

String leaveRequestManagerToJson(List<LeaveRequestManagerModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class LeaveRequestManagerModel extends LeaveRequestManager {
  const LeaveRequestManagerModel({
    required int? idLeave,
    required int? idLeaveType,
    required String? description,
    required String? filename,
    required DateTime? start,
    required DateTime? end,
    required int? idEmployees,
    required double? used,
    required double? quota,
    required double? balance,
    required double? remaining,
    required dynamic carry,
    required int? idManager,
    required dynamic approveDate,
    required dynamic isApprove,
    required int? isFullDay,
    required dynamic workingStart,
    required dynamic workingEnd,
    required int? isActive,
    required dynamic fillInApprove,
    required DateTime? createDate,
    required dynamic isWithdraw,
    required dynamic commentManager,
    required dynamic idHoliday,
    required dynamic ccEmail,
    required String? name,
    required String? titleTh,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? firstname_EN,
    required String? lastname_EN,
    required String? positionName,
    required String? positionName_EN,
    required dynamic departmentName,
    required dynamic imageName,
    required dynamic holidayName,
    required String? startText,
    required String? endText,
    required dynamic approveDateText,
    required String? createDateText,
    required dynamic imageUrl,
    required String? fileUrl,
  }) : super(
          idLeave: idLeave,
          idLeaveType: idLeaveType,
          description: description,
          filename: filename,
          start: start,
          end: end,
          idEmployees: idEmployees,
          used: used,
          quota: quota,
          balance: balance,
          remaining: remaining,
          carry: carry,
          idManager: idManager,
          approveDate: approveDate,
          isApprove: isApprove,
          isFullDay: isFullDay,
          workingStart: workingStart,
          workingEnd: workingEnd,
          isActive: isActive,
          fillInApprove: fillInApprove,
          createDate: createDate,
          isWithdraw: isWithdraw,
          commentManager: commentManager,
          idHoliday: idHoliday,
          ccEmail: ccEmail,
          name: name,
          titleTh: titleTh,
          firstnameTh: firstnameTh,
          firstname_EN: firstname_EN,
          lastname_EN: lastname_EN,
          lastnameTh: lastnameTh,
          positionName: positionName,
          positionName_EN: positionName_EN,
          departmentName: departmentName,
          imageName: imageName,
          holidayName: holidayName,
          startText: startText,
          endText: endText,
          approveDateText: approveDateText,
          createDateText: createDateText,
          imageUrl: imageUrl,
          fileUrl: fileUrl,
        );

  factory LeaveRequestManagerModel.fromJson(Map<String, dynamic> json) =>
      LeaveRequestManagerModel(
        idLeave: json["idLeave"],
        idLeaveType: json["idLeaveType"],
        description: json["description"],
        filename: json["filename"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        idEmployees: json["idEmployees"],
        used: json["used"]?.toDouble(),
        quota: json["quota"]?.toDouble(),
        balance: json["balance"]?.toDouble(),
        remaining: json["remaining"]?.toDouble(),
        carry: json["carry"],
        idManager: json["idManager"],
        approveDate: json["approveDate"],
        isApprove: json["isApprove"],
        isFullDay: json["isFullDay"],
        workingStart: json["workingStart"],
        workingEnd: json["workingEnd"],
        isActive: json["isActive"],
        fillInApprove: json["fillInApprove"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isWithdraw: json["isWithdraw"],
        commentManager: json["commentManager"],
        idHoliday: json["idHoliday"],
        ccEmail: json["cc_email"],
        name: json["name"],
        titleTh: json["title_TH"],
        firstnameTh: json["firstname_TH"],
        lastnameTh: json["lastname_TH"],
        firstname_EN: json["firstname_EN"],
        lastname_EN: json["lastname_EN"],
        positionName: json["positionName"],
        positionName_EN: json["positionName_EN"],
        departmentName: json["departmentName"],
        imageName: json["imageName"],
        holidayName: json["holidayName"],
        startText: json["startText"],
        endText: json["endText"],
        approveDateText: json["approveDateText"],
        createDateText: json["createDateText"],
        imageUrl: json["imageURL"],
        fileUrl: json["fileURL"],
      );

  Map<String, dynamic> toJson() => {
        "idLeave": idLeave,
        "idLeaveType": idLeaveType,
        "description": description,
        "filename": filename,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "idEmployees": idEmployees,
        "used": used,
        "quota": quota,
        "balance": balance,
        "remaining": remaining,
        "carry": carry,
        "idManager": idManager,
        "approveDate": approveDate,
        "isApprove": isApprove,
        "isFullDay": isFullDay,
        "workingStart": workingStart,
        "workingEnd": workingEnd,
        "isActive": isActive,
        "fillInApprove": fillInApprove,
        "createDate": createDate?.toIso8601String(),
        "isWithdraw": isWithdraw,
        "commentManager": commentManager,
        "idHoliday": idHoliday,
        "cc_email": ccEmail,
        "name": name,
        "title_TH": titleTh,
        "firstname_TH": firstnameTh,
        "lastname_TH": lastnameTh,
        "firstname_EN": firstname_EN,
        "lastname_EN": lastname_EN,
        "positionName_EN": positionName_EN,
        "positionName": positionName,
        "departmentName": departmentName,
        "imageName": imageName,
        "holidayName": holidayName,
        "startText": startText,
        "endText": endText,
        "approveDateText": approveDateText,
        "createDateText": createDateText,
        "imageURL": imageUrl,
        "fileURL": fileUrl,
      };
}
