// To parse this JSON data, do
//
//     final withdrawManager = withdrawManagerFromJson(jsonString);

import 'dart:convert';

import 'package:unihr/src/features/manager/waiting_status/domain/entities/entities.dart';

List<WithdrawLeaveManagerModel> withdrawManagerFromJson(String str) =>
    List<WithdrawLeaveManagerModel>.from(
        json.decode(str).map((x) => WithdrawLeaveManagerModel.fromJson(x)));

String withdrawManagerToJson(List<WithdrawLeaveManagerModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class WithdrawLeaveManagerModel extends WithdrawLeaveManager {
  const WithdrawLeaveManagerModel({
    required int? idLeaveEmployeesWithdraw,
    required int? idLeave,
    required int? managerApprove,
    required int? isApprove,
    required DateTime? approveDate,
    required dynamic fillInCreate,
    required dynamic fillInApprove,
    required DateTime? createDate,
    required int? isActive,
    required dynamic commentManager,
    required int? idLeaveType,
    required String? name,
    required String? name_EN,
    required DateTime? start,
    required DateTime? end,
    required int? isFullDay,
    required String? managerFirstnameTh,
    required String? managerLastnameTh,
    required String? managerFirstnameEn,
    required String? managerLastnameEn,
    required String? managerEmail,
    required String? firstnameTh,
    required String? firstnameEn,
    required String? lastnameTh,
    required String? lastnameEn,
    required String? positionName,
    required dynamic imageName,
    required int? idEmployees,
    required String? startText,
    required String? endText,
    required String? approveDateText,
    required String? createDateText,
    required dynamic imageUrl,
    required dynamic fileUrl,
  }) : super(
          idLeaveEmployeesWithdraw: idLeaveEmployeesWithdraw,
          idLeave: idLeave,
          managerApprove: managerApprove,
          isApprove: isApprove,
          approveDate: approveDate,
          fillInCreate: fillInCreate,
          fillInApprove: fillInApprove,
          createDate: createDate,
          isActive: isActive,
          commentManager: commentManager,
          idLeaveType: idLeaveType,
          name: name,
          name_EN: name_EN,
          start: start,
          end: end,
          isFullDay: isFullDay,
          managerFirstnameTh: managerFirstnameTh,
          managerLastnameTh: managerLastnameTh,
          managerFirstnameEn: managerFirstnameEn,
          managerLastnameEn: managerLastnameEn,
          managerEmail: managerEmail,
          firstnameTh: firstnameTh,
          firstnameEn: firstnameEn,
          lastnameTh: lastnameTh,
          lastnameEn: lastnameEn,
          positionName: positionName,
          imageName: imageName,
          idEmployees: idEmployees,
          startText: startText,
          endText: endText,
          approveDateText: approveDateText,
          createDateText: createDateText,
          imageUrl: imageUrl,
          fileUrl: fileUrl,
        );

  factory WithdrawLeaveManagerModel.fromJson(Map<String, dynamic> json) =>
      WithdrawLeaveManagerModel(
        idLeaveEmployeesWithdraw: json["idLeaveEmployeesWithdraw"],
        idLeave: json["idLeave"],
        managerApprove: json["managerApprove"],
        isApprove: json["isApprove"],
        approveDate: json["approveDate"] == null
            ? null
            : DateTime.parse(json["approveDate"]),
        fillInCreate: json["fillInCreate"],
        fillInApprove: json["fillInApprove"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isActive: json["isActive"],
        commentManager: json["commentManager"],
        idLeaveType: json["idLeaveType"],
        name: json["name"],
        name_EN: json["name_EN"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        isFullDay: json["isFullDay"],
        managerFirstnameTh: json["manager_firstname_TH"],
        managerLastnameTh: json["manager_lastname_TH"],
        managerFirstnameEn: json["manager_firstname_EN"],
        managerLastnameEn: json["manager_lastname_EN"],
        managerEmail: json["manager_email"],
        firstnameTh: json["firstname_TH"],
        firstnameEn: json["firstname_EN"],
        lastnameTh: json["lastname_TH"],
        lastnameEn: json["lastname_EN"],
        positionName: json["positionName"],
        imageName: json["imageName"],
        idEmployees: json["idEmployees"],
        startText: json["startText"],
        endText: json["endText"],
        approveDateText: json["approveDateText"],
        createDateText: json["createDateText"],
        imageUrl: json["imageURL"],
        fileUrl: json["fileURL"],
      );

  Map<String, dynamic> toJson() => {
        "idLeaveEmployeesWithdraw": idLeaveEmployeesWithdraw,
        "idLeave": idLeave,
        "managerApprove": managerApprove,
        "isApprove": isApprove,
        "approveDate": approveDate?.toIso8601String(),
        "fillInCreate": fillInCreate,
        "fillInApprove": fillInApprove,
        "createDate": createDate?.toIso8601String(),
        "isActive": isActive,
        "commentManager": commentManager,
        "idLeaveType": idLeaveType,
        "name": name,
        "name_EN": name_EN,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "isFullDay": isFullDay,
        "manager_firstname_TH": managerFirstnameTh,
        "manager_lastname_TH": managerLastnameTh,
        "manager_firstname_EN": managerFirstnameEn,
        "manager_lastname_EN": managerLastnameEn,
        "manager_email": managerEmail,
        "firstname_TH": firstnameTh,
        "firstname_EN": firstnameEn,
        "lastname_TH": lastnameTh,
        "lastname_EN": lastnameEn,
        "positionName": positionName,
        "imageName": imageName,
        "idEmployees": idEmployees,
        "startText": startText,
        "endText": endText,
        "approveDateText": approveDateText,
        "createDateText": createDateText,
        "imageURL": imageUrl,
        "fileURL": fileUrl,
      };
}
