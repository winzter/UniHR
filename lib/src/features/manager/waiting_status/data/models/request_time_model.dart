import 'dart:convert';
import '../../domain/entities/entities.dart';

List<RequestTimeManagerModel> requestTimeManagerModelFromJson(String str) => List<RequestTimeManagerModel>.from(json.decode(str).map((x) => RequestTimeManagerModel.fromJson(x)));

String requestTimeManagerModelToJson(List<RequestTimeManagerModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class RequestTimeManagerModel extends RequestTimeManager{

  const RequestTimeManagerModel({
    required int? idRequestTime,
    required DateTime? start,
    required DateTime? end,
    required DateTime? workDate,
    required int? idRequestReason,
    required int? idRequestType,
    required String? otherReason,
    required int? idEmployees,
    required int? isManagerLv1Approve,
    required dynamic isManagerLv2Approve,
    required int? amountHours,
    required int? xOt,
    required int? xOtHoliday,
    required int? xWorkingDailyHoliday,
    required int? xWorkingMonthlyHoliday,
    required int? isActive,
    required int? managerLv1ApproveBy,
    required DateTime? managerLv1ApproveDate,
    required dynamic managerLv2ApproveBy,
    required dynamic managerLv2ApproveDate,
    required dynamic requestTimecol,
    required DateTime? createDate,
    required int? isDoubleApproval,
    required int? approvalLevel,
    required dynamic fillInCreate,
    required dynamic fillInApproveLv1,
    required dynamic fillInApproveLv2,
    required int? isWithdraw,
    required dynamic payShift,
    required dynamic commentManagerLv1,
    required dynamic commentManagerLv2,
    required String? name,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? firstnameEn,
    required String? lastnameEn,
    required String? positionName,
    required dynamic departmentName,
    required int? idCompany,
    required String? reasonName,
    required dynamic imageName,
    required String? startText,
    required String? endText,
    required String? createDateText,
    required String? workDateText,
    required String? managerLv1ApproveDateText,
    required dynamic imageUrl,
  }):super(
    idRequestTime : idRequestTime,
    start : start,
    end : end,
    workDate : workDate,
    idRequestReason : idRequestReason,
    idRequestType : idRequestType,
    otherReason : otherReason,
    idEmployees : idEmployees,
    isManagerLv1Approve : isManagerLv1Approve,
    isManagerLv2Approve : isManagerLv2Approve,
    amountHours : amountHours,
    xOt : xOt,
    xOtHoliday : xOtHoliday,
    xWorkingDailyHoliday : xWorkingDailyHoliday,
    xWorkingMonthlyHoliday : xWorkingMonthlyHoliday,
    isActive : isActive,
    managerLv1ApproveBy : managerLv1ApproveBy,
    managerLv1ApproveDate : managerLv1ApproveDate,
    managerLv2ApproveBy : managerLv2ApproveBy,
    managerLv2ApproveDate : managerLv2ApproveDate,
    requestTimecol : requestTimecol,
    createDate : createDate,
    isDoubleApproval : isDoubleApproval,
    approvalLevel : approvalLevel,
    fillInCreate : fillInCreate,
    fillInApproveLv1 : fillInApproveLv1,
    fillInApproveLv2 : fillInApproveLv2,
    isWithdraw : isWithdraw,
    payShift : payShift,
    commentManagerLv1 : commentManagerLv1,
    commentManagerLv2 : commentManagerLv2,
    name : name,
    firstnameTh : firstnameTh,
    lastnameTh : lastnameTh,
    firstnameEn : firstnameEn,
    lastnameEn : lastnameEn,
    positionName : positionName,
    departmentName : departmentName,
    idCompany : idCompany,
    reasonName : reasonName,
    imageName : imageName,
    startText : startText,
    endText : endText,
    createDateText : createDateText,
    workDateText : workDateText,
    managerLv1ApproveDateText : managerLv1ApproveDateText,
    imageUrl : imageUrl,
  );

  factory RequestTimeManagerModel.fromJson(Map<String, dynamic> json) => RequestTimeManagerModel(
    idRequestTime: json["idRequestTime"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    workDate: json["workDate"] == null ? null : DateTime.parse(json["workDate"]),
    idRequestReason: json["idRequestReason"],
    idRequestType: json["idRequestType"],
    otherReason: json["otherReason"],
    idEmployees: json["idEmployees"],
    isManagerLv1Approve: json["isManagerLV1Approve"],
    isManagerLv2Approve: json["isManagerLV2Approve"],
    amountHours: json["amountHours"],
    xOt: json["xOT"],
    xOtHoliday: json["xOTHoliday"],
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"],
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"],
    isActive: json["isActive"],
    managerLv1ApproveBy: json["managerLV1ApproveBy"],
    managerLv1ApproveDate: json["managerLV1ApproveDate"] == null ? null : DateTime.parse(json["managerLV1ApproveDate"]),
    managerLv2ApproveBy: json["managerLV2ApproveBy"],
    managerLv2ApproveDate: json["managerLV2ApproveDate"],
    requestTimecol: json["RequestTimecol"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    isDoubleApproval: json["isDoubleApproval"],
    approvalLevel: json["approvalLevel"],
    fillInCreate: json["fillInCreate"],
    fillInApproveLv1: json["fillInApproveLV1"],
    fillInApproveLv2: json["fillInApproveLV2"],
    isWithdraw: json["isWithdraw"],
    payShift: json["payShift"],
    commentManagerLv1: json["commentManagerLV1"],
    commentManagerLv2: json["commentManagerLV2"],
    name: json["name"],
    firstnameTh: json["firstname_TH"],
    lastnameTh: json["lastname_TH"],
    firstnameEn: json["firstname_EN"],
    lastnameEn: json["lastname_EN"],
    positionName: json["positionName"],
    departmentName: json["departmentName"],
    idCompany: json["idCompany"],
    reasonName: json["reasonName"],
    imageName: json["imageName"],
    startText: json["startText"],
    endText: json["endText"],
    createDateText: json["createDateText"],
    workDateText: json["workDateText"],
    managerLv1ApproveDateText: json["managerLV1ApproveDateText"],
    imageUrl: json["imageURL"],
  );

  Map<String, dynamic> toJson() => {
    "idRequestTime": idRequestTime,
    "start": start?.toIso8601String(),
    "end": end?.toIso8601String(),
    "workDate": workDate?.toIso8601String(),
    "idRequestReason": idRequestReason,
    "idRequestType": idRequestType,
    "otherReason": otherReason,
    "idEmployees": idEmployees,
    "isManagerLV1Approve": isManagerLv1Approve,
    "isManagerLV2Approve": isManagerLv2Approve,
    "amountHours": amountHours,
    "xOT": xOt,
    "xOTHoliday": xOtHoliday,
    "xWorkingDailyHoliday": xWorkingDailyHoliday,
    "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
    "isActive": isActive,
    "managerLV1ApproveBy": managerLv1ApproveBy,
    "managerLV1ApproveDate": managerLv1ApproveDate?.toIso8601String(),
    "managerLV2ApproveBy": managerLv2ApproveBy,
    "managerLV2ApproveDate": managerLv2ApproveDate,
    "RequestTimecol": requestTimecol,
    "createDate": createDate?.toIso8601String(),
    "isDoubleApproval": isDoubleApproval,
    "approvalLevel": approvalLevel,
    "fillInCreate": fillInCreate,
    "fillInApproveLV1": fillInApproveLv1,
    "fillInApproveLV2": fillInApproveLv2,
    "isWithdraw": isWithdraw,
    "payShift": payShift,
    "commentManagerLV1": commentManagerLv1,
    "commentManagerLV2": commentManagerLv2,
    "name": name,
    "firstname_TH": firstnameTh,
    "lastname_TH": lastnameTh,
    "firstname_EN": firstnameEn,
    "lastname_EN": lastnameEn,
    "positionName": positionName,
    "departmentName": departmentName,
    "idCompany": idCompany,
    "reasonName": reasonName,
    "imageName": imageName,
    "startText": startText,
    "endText": endText,
    "createDateText": createDateText,
    "workDateText": workDateText,
    "managerLV1ApproveDateText": managerLv1ApproveDateText,
    "imageURL": imageUrl,
  };
}
