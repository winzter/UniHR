import 'dart:convert';
import '../../domain/entities/entities.dart';

List<EmployeesAttendanceModel> employeesAttendanceFromJson(String str) => List<EmployeesAttendanceModel>.from(json.decode(str).map((x) => EmployeesAttendanceModel.fromJson(x)));

String employeesAttendanceToJson(List<EmployeesAttendanceModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class EmployeesAttendanceModel extends EmployeesAttendanceEntity{

  EmployeesAttendanceModel({
    required int? idAttendance,
    required DateTime? attendanceDateTime,
    required int? isCheckIn,
    required dynamic workDay,
    required int? idAttendanceType,
    required int? idGpsLocations,
    required int? idEmployees,
    required int? idCompany,
    required dynamic idShift,
    required dynamic idGroupGpsLocations,
    required dynamic gpsAddress,
    required dynamic latitude,
    required dynamic longitude,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? gpsLocationsName,
    required String? positionName,
    required String? titleTh,
    required String? imageName,
    required String? time,
    required String? attendanceDateTimeText,
    required String? imageProfile,
  }):super(
    idAttendance:idAttendance,
    attendanceDateTime:attendanceDateTime,
    isCheckIn:isCheckIn,
    workDay:workDay,
    idAttendanceType:idAttendanceType,
    idGpsLocations:idGpsLocations,
    idEmployees:idEmployees,
    idCompany:idCompany,
    idShift:idShift,
    idGroupGpsLocations:idGroupGpsLocations,
    gpsAddress:gpsAddress,
    latitude:latitude,
    longitude:longitude,
    firstnameTh:firstnameTh,
    lastnameTh:lastnameTh,
    gpsLocationsName:gpsLocationsName,
    positionName:positionName,
    titleTh:titleTh,
    imageName:imageName,
    time:time,
    attendanceDateTimeText:attendanceDateTimeText,
    imageProfile:imageProfile,
  );

  factory EmployeesAttendanceModel.fromJson(Map<String, dynamic> json) => EmployeesAttendanceModel(
    idAttendance: json["idAttendance"],
    attendanceDateTime: json["attendanceDateTime"] == null ? null : DateTime.parse(json["attendanceDateTime"]),
    isCheckIn: json["isCheckIn"],
    workDay: json["workDay"],
    idAttendanceType: json["idAttendanceType"],
    idGpsLocations: json["idGpsLocations"],
    idEmployees: json["idEmployees"],
    idCompany: json["idCompany"],
    idShift: json["idShift"],
    idGroupGpsLocations: json["idGroupGpsLocations"],
    gpsAddress: json["gpsAddress"],
    latitude: json["latitude"],
    longitude: json["longitude"],
    firstnameTh: json["firstname_TH"],
    lastnameTh: json["lastname_TH"],
    gpsLocationsName: json["gpsLocationsName"],
    positionName: json["positionName"],
    titleTh: json["title_TH"],
    imageName: json["imageName"],
    time: json["time"],
    attendanceDateTimeText: json["attendanceDateTimeText"],
    imageProfile: json["imageProfile"],
  );

  Map<String, dynamic> toJson() => {
    "idAttendance": idAttendance,
    "attendanceDateTime": attendanceDateTime?.toIso8601String(),
    "isCheckIn": isCheckIn,
    "workDay": workDay,
    "idAttendanceType": idAttendanceType,
    "idGpsLocations": idGpsLocations,
    "idEmployees": idEmployees,
    "idCompany": idCompany,
    "idShift": idShift,
    "idGroupGpsLocations": idGroupGpsLocations,
    "gpsAddress": gpsAddress,
    "latitude": latitude,
    "longitude": longitude,
    "firstname_TH": firstnameTh,
    "lastname_TH": lastnameTh,
    "gpsLocationsName": gpsLocationsName,
    "positionName": positionName,
    "title_TH": titleTh,
    "imageName": imageName,
    "time": time,
    "attendanceDateTimeText": attendanceDateTimeText,
    "imageProfile": imageProfile,
  };
}
