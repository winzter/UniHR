import 'dart:convert';

import 'package:unihr/src/features/manager/employees_list/domain/entities/each_emp_entity.dart';

EachEmployeeModel eachEmployeeModelFromJson(String str) =>
    EachEmployeeModel.fromJson(json.decode(str));

String eachEmployeeModelToJson(EachEmployeeModel data) =>
    json.encode(data.toJson());

class EachEmployeeModel extends EachEmployeeEntity {
  EachEmployeeModel({
    required int? idEmployees,
    required String? employeeId,
    required String? titleTh,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? nicknameTh,
    required String? titleEn,
    required String? firstnameEn,
    required String? lastnameEn,
    required String? nicknameEn,
    required String? gender,
    required String? personalId,
    required String? nationality,
    required String? maritalStatus,
    required String? passportNumber,
    required String? workPermitNumber,
    required String? taxId,
    required String? ssoId,
    required DateTime? birthday,
    required dynamic address,
    required String? houseNo,
    required String? village,
    required String? villageNo,
    required String? alley,
    required String? road,
    required String? subDistrict,
    required String? district,
    required String? provience,
    required String? areaCode,
    required String? telephoneMobile,
    required String? username,
    required String? email,
    required String? emergencyContact,
    required String? emergencyRelationship,
    required String? emergencyPhone,
    required dynamic numberOfChildren,
    required dynamic spouseFirstname,
    required dynamic spouseLastname,
    required dynamic spouseBirthday,
    required dynamic spouseTaxId,
    required String? employmentTime,
    required dynamic timeScan,
    required String? workingLocation,
    required String? filedOffice,
    required DateTime? hiringDate,
    required String? workingType,
    required int? salary,
    required dynamic contractType,
    required dynamic retirementDate,
    required dynamic contractTermainatoinDate,
    required dynamic resignDate,
    required String? bookBank,
    required String? bookBankBranchName,
    required String? bookId,
    required String? reportBankBankName,
    required String? reportBankBankId,
    required String? reportBankBookBankId,
    required String? reportBankName,
    required String? reportBankRef,
    required dynamic costCenterCharge,
    required dynamic costElementCharge,
    required dynamic io,
    required int? idEmploymentType,
    required int? idPaymentType,
    required int? idJobLevel,
    required int? idPersonnelLevel,
    required int? idCompany,
    required dynamic idBranch,
    required int? idRole,
    required int? idManagerLv1,
    required dynamic idManagerLv2,
    required String? password,
    required int? isActive,
    required dynamic createDate,
    required dynamic createBy,
    required DateTime? updateDate,
    required int? updateBy,
    required dynamic lineUserId,
    required int? mainWorkingLocationPoint,
    required String? methodAttendance,
    required String? imageName,
    required dynamic servY,
    required dynamic servM,
    required int? oesyY,
    required int? oesyM,
    required dynamic userPf,
    required DateTime? servPfDate,
    required DateTime? pfDate,
    required dynamic criminalImage,
    required int? isFinger,
    required int? isFingerAffectPayroll,
    required dynamic probationR1Date,
    required int? probationR1Approved,
    required String? probationR1Result,
    required dynamic probationR2Date,
    required int? probationR2Approved,
    required String? probationR2Result,
    required int? expandTimeProbation,
    required dynamic reasonResign,
    required dynamic reasonResignOther,
    required dynamic reasonTerminate,
    required dynamic reasonTerminateOther,
    required int? isBlacklist,
    required dynamic estimatePerformanceResult,
    required int? estimatePerformanceApproved,
    required DateTime? updateEstimatePerformance,
    required int? isOpenRegisterManpower,
    required String? overview,
    required int? isExit,
    required dynamic isPayroll,
    required int? idPosition,
    required String? positionName,
    required String? positionName_EN,
    required String? sectionName,
    required String? departmentName,
    required String? divisionName,
    required String? companyName,
    required int? idEmployeeEmploymentType,
    required String? employmentTypeName,
    required int? idEmployeePosition,
    required DateTime? employeePositionStart,
    required int? idEmployeePersonnelLevel,
    required DateTime? employeePersonnelLevelStart,
    required String? personnelLevelName,
    required String? personnelLevelGroupName,
    required String? jobLevelName,
    required String? jobGroupLevelName,
    required String? paymentTypeName,
    required String? paymentRoundName,
    required String? groupGpsLocationsName,
    required int? managerLv1IdManagerLv1,
    required String? managerLv1FirstnameTh,
    required String? managerLv1LastnameTh,
    required String? managerLv1FirstnameEn,
    required String? managerLv1LastnameEn,
    required String? managerLv1Email,
    required dynamic managerLv2IdManagerLv2,
    required dynamic managerLv2FirstnameTh,
    required dynamic managerLv2LastnameTh,
    required dynamic managerLv2FirstnameEn,
    required dynamic managerLv2LastnameEn,
    required dynamic managerLv2Email,
    required String? managerLv1PositionName,
    required dynamic managerLv2PositionName,
    required int? idEmployeeSalary,
    required dynamic idManagerGroupLv1,
    required dynamic idManagerGroupLv2,
    required dynamic managerGroupLv1ManagerGroupName,
    required dynamic managerGroupLv2ManagerGroupName,
    required List<EducationModel>? educations,
    required ShiftModel? shift,
    required List<dynamic>? family,
    required List<ExperienceModel>? experience,
    required List<dynamic>? roles,
    required String? imageProfile,
  }) : super(
          idEmployees: idEmployees,
          employeeId: employeeId,
          titleTh: titleTh,
          firstnameTh: firstnameTh,
          lastnameTh: lastnameTh,
          nicknameTh: nicknameTh,
          titleEn: titleEn,
          firstnameEn: firstnameEn,
          lastnameEn: lastnameEn,
          nicknameEn: nicknameEn,
          gender: gender,
          personalId: personalId,
          nationality: nationality,
          maritalStatus: maritalStatus,
          passportNumber: passportNumber,
          workPermitNumber: workPermitNumber,
          taxId: taxId,
          ssoId: ssoId,
          birthday: birthday,
          address: address,
          houseNo: houseNo,
          village: village,
          villageNo: villageNo,
          alley: alley,
          road: road,
          subDistrict: subDistrict,
          district: district,
          provience: provience,
          areaCode: areaCode,
          telephoneMobile: telephoneMobile,
          username: username,
          email: email,
          emergencyContact: emergencyContact,
          emergencyRelationship: emergencyRelationship,
          emergencyPhone: emergencyPhone,
          numberOfChildren: numberOfChildren,
          spouseFirstname: spouseFirstname,
          spouseLastname: spouseLastname,
          spouseBirthday: spouseBirthday,
          spouseTaxId: spouseTaxId,
          employmentTime: employmentTime,
          timeScan: timeScan,
          workingLocation: workingLocation,
          filedOffice: filedOffice,
          hiringDate: hiringDate,
          workingType: workingType,
          salary: salary,
          contractType: contractType,
          retirementDate: retirementDate,
          contractTermainatoinDate: contractTermainatoinDate,
          resignDate: resignDate,
          bookBank: bookBank,
          bookBankBranchName: bookBankBranchName,
          bookId: bookId,
          reportBankBankName: reportBankBankName,
          reportBankBankId: reportBankBankId,
          reportBankBookBankId: reportBankBookBankId,
          reportBankName: reportBankName,
          reportBankRef: reportBankRef,
          costCenterCharge: costCenterCharge,
          costElementCharge: costElementCharge,
          io: io,
          idEmploymentType: idEmploymentType,
          idPaymentType: idPaymentType,
          idJobLevel: idJobLevel,
          idPersonnelLevel: idPersonnelLevel,
          idCompany: idCompany,
          idBranch: idBranch,
          idRole: idRole,
          idManagerLv1: idManagerLv1,
          idManagerLv2: idManagerLv2,
          password: password,
          isActive: isActive,
          createDate: createDate,
          createBy: createBy,
          updateDate: updateDate,
          updateBy: updateBy,
          lineUserId: lineUserId,
          mainWorkingLocationPoint: mainWorkingLocationPoint,
          methodAttendance: methodAttendance,
          imageName: imageName,
          servY: servY,
          servM: servM,
          oesyY: oesyY,
          oesyM: oesyM,
          userPf: userPf,
          servPfDate: servPfDate,
          pfDate: pfDate,
          criminalImage: criminalImage,
          isFinger: isFinger,
          isFingerAffectPayroll: isFingerAffectPayroll,
          probationR1Date: probationR1Date,
          probationR1Approved: probationR1Approved,
          probationR1Result: probationR1Result,
          probationR2Date: probationR2Date,
          probationR2Approved: probationR2Approved,
          probationR2Result: probationR2Result,
          expandTimeProbation: expandTimeProbation,
          reasonResign: reasonResign,
          reasonResignOther: reasonResignOther,
          reasonTerminate: reasonTerminate,
          reasonTerminateOther: reasonTerminateOther,
          isBlacklist: isBlacklist,
          estimatePerformanceResult: estimatePerformanceResult,
          estimatePerformanceApproved: estimatePerformanceApproved,
          updateEstimatePerformance: updateEstimatePerformance,
          isOpenRegisterManpower: isOpenRegisterManpower,
          overview: overview,
          isExit: isExit,
          isPayroll: isPayroll,
          idPosition: idPosition,
          positionName: positionName,
          positionName_EN: positionName_EN,
          sectionName: sectionName,
          departmentName: departmentName,
          divisionName: divisionName,
          companyName: companyName,
          idEmployeeEmploymentType: idEmployeeEmploymentType,
          employmentTypeName: employmentTypeName,
          idEmployeePosition: idEmployeePosition,
          employeePositionStart: employeePositionStart,
          idEmployeePersonnelLevel: idEmployeePersonnelLevel,
          employeePersonnelLevelStart: employeePersonnelLevelStart,
          personnelLevelName: personnelLevelName,
          personnelLevelGroupName: personnelLevelGroupName,
          jobLevelName: jobLevelName,
          jobGroupLevelName: jobGroupLevelName,
          paymentTypeName: paymentTypeName,
          paymentRoundName: paymentRoundName,
          groupGpsLocationsName: groupGpsLocationsName,
          managerLv1IdManagerLv1: managerLv1IdManagerLv1,
          managerLv1FirstnameTh: managerLv1FirstnameTh,
          managerLv1LastnameTh: managerLv1LastnameTh,
          managerLv1FirstnameEn: managerLv1FirstnameEn,
          managerLv1LastnameEn: managerLv1LastnameEn,
          managerLv1Email: managerLv1Email,
          managerLv2IdManagerLv2: managerLv2IdManagerLv2,
          managerLv2FirstnameTh: managerLv2FirstnameTh,
          managerLv2LastnameTh: managerLv2LastnameTh,
          managerLv2FirstnameEn: managerLv2FirstnameEn,
          managerLv2LastnameEn: managerLv2LastnameEn,
          managerLv2Email: managerLv2Email,
          managerLv1PositionName: managerLv1PositionName,
          managerLv2PositionName: managerLv2PositionName,
          idEmployeeSalary: idEmployeeSalary,
          idManagerGroupLv1: idManagerGroupLv1,
          idManagerGroupLv2: idManagerGroupLv2,
          managerGroupLv1ManagerGroupName: managerGroupLv1ManagerGroupName,
          managerGroupLv2ManagerGroupName: managerGroupLv2ManagerGroupName,
          educations: educations,
          shift: shift,
          family: family,
          experience: experience,
          roles: roles,
          imageProfile: imageProfile,
        );

  factory EachEmployeeModel.fromJson(Map<String, dynamic> json) =>
      EachEmployeeModel(
        idEmployees: json["idEmployees"],
        employeeId: json["employeeID"],
        titleTh: json["title_TH"],
        firstnameTh: json["firstname_TH"],
        lastnameTh: json["lastname_TH"],
        nicknameTh: json["nickname_TH"],
        titleEn: json["title_EN"],
        firstnameEn: json["firstname_EN"],
        lastnameEn: json["lastname_EN"],
        nicknameEn: json["nickname_EN"],
        gender: json["gender"],
        personalId: json["personalID"],
        nationality: json["nationality"],
        maritalStatus: json["maritalStatus"],
        passportNumber: json["passportNumber"],
        workPermitNumber: json["workPermitNumber"],
        taxId: json["taxID"],
        ssoId: json["ssoID"],
        birthday:
            json["birthday"] == null ? null : DateTime.parse(json["birthday"]),
        address: json["address"],
        houseNo: json["houseNo"],
        village: json["village"],
        villageNo: json["villageNo"],
        alley: json["alley"],
        road: json["road"],
        subDistrict: json["subDistrict"],
        district: json["district"],
        provience: json["provience"],
        areaCode: json["areaCode"],
        telephoneMobile: json["telephoneMobile"],
        username: json["username"],
        email: json["email"],
        emergencyContact: json["emergencyContact"],
        emergencyRelationship: json["emergencyRelationship"],
        emergencyPhone: json["emergencyPhone"],
        numberOfChildren: json["numberOfChildren"],
        spouseFirstname: json["spouseFirstname"],
        spouseLastname: json["spouseLastname"],
        spouseBirthday: json["spouseBirthday"],
        spouseTaxId: json["spouseTaxID"],
        employmentTime: json["employmentTime"],
        timeScan: json["timeScan"],
        workingLocation: json["workingLocation"],
        filedOffice: json["filed_office"],
        hiringDate: json["hiringDate"] == null
            ? null
            : DateTime.parse(json["hiringDate"]),
        workingType: json["workingType"],
        salary: json["salary"],
        contractType: json["contractType"],
        retirementDate: json["retirementDate"],
        contractTermainatoinDate: json["contractTermainatoinDate"],
        resignDate: json["resignDate"],
        bookBank: json["bookBank"],
        bookBankBranchName: json["bookBankBranchName"],
        bookId: json["bookID"],
        reportBankBankName: json["reportBankBankName"],
        reportBankBankId: json["reportBankBankID"],
        reportBankBookBankId: json["reportBankBookBankID"],
        reportBankName: json["reportBankName"],
        reportBankRef: json["reportBankRef"],
        costCenterCharge: json["costCenterCharge"],
        costElementCharge: json["costElementCharge"],
        io: json["io"],
        idEmploymentType: json["idEmploymentType"],
        idPaymentType: json["idPaymentType"],
        idJobLevel: json["idJobLevel"],
        idPersonnelLevel: json["idPersonnelLevel"],
        idCompany: json["idCompany"],
        idBranch: json["idBranch"],
        idRole: json["idRole"],
        idManagerLv1: json["idManagerLV1"],
        idManagerLv2: json["idManagerLV2"],
        password: json["password"],
        isActive: json["isActive"],
        createDate: json["createDate"],
        createBy: json["createBy"],
        updateDate: json["updateDate"] == null
            ? null
            : DateTime.parse(json["updateDate"]),
        updateBy: json["updateBy"],
        lineUserId: json["lineUserId"],
        mainWorkingLocationPoint: json["mainWorkingLocationPoint"],
        methodAttendance: json["methodAttendance"],
        imageName: json["imageName"],
        servY: json["Serv_Y"],
        servM: json["Serv_M"],
        oesyY: json["OESY_Y"],
        oesyM: json["OESY_M"],
        userPf: json["userPF"],
        servPfDate: json["ServPFDate"] == null
            ? null
            : DateTime.parse(json["ServPFDate"]),
        pfDate: json["PFDate"] == null ? null : DateTime.parse(json["PFDate"]),
        criminalImage: json["criminalImage"],
        isFinger: json["isFinger"],
        isFingerAffectPayroll: json["isFingerAffectPayroll"],
        probationR1Date: json["probationR1Date"],
        probationR1Approved: json["probationR1Approved"],
        probationR1Result: json["probationR1Result"],
        probationR2Date: json["probationR2Date"],
        probationR2Approved: json["probationR2Approved"],
        probationR2Result: json["probationR2Result"],
        expandTimeProbation: json["expandTimeProbation"],
        reasonResign: json["reasonResign"],
        reasonResignOther: json["reasonResignOther"],
        reasonTerminate: json["reasonTerminate"],
        reasonTerminateOther: json["reasonTerminateOther"],
        isBlacklist: json["isBlacklist"],
        estimatePerformanceResult: json["estimatePerformanceResult"],
        estimatePerformanceApproved: json["estimatePerformanceApproved"],
        updateEstimatePerformance: json["updateEstimatePerformance"] == null
            ? null
            : DateTime.parse(json["updateEstimatePerformance"]),
        isOpenRegisterManpower: json["isOpenRegisterManpower"],
        overview: json["overview"],
        isExit: json["isExit"],
        isPayroll: json["isPayroll"],
        idPosition: json["idPosition"],
        positionName: json["positionName"],
        positionName_EN: json["positionName_EN"],
        sectionName: json["sectionName"],
        departmentName: json["departmentName"],
        divisionName: json["divisionName"],
        companyName: json["companyName"],
        idEmployeeEmploymentType: json["idEmployeeEmploymentType"],
        employmentTypeName: json["employmentTypeName"],
        idEmployeePosition: json["idEmployeePosition"],
        employeePositionStart: json["employeePositionStart"] == null
            ? null
            : DateTime.parse(json["employeePositionStart"]),
        idEmployeePersonnelLevel: json["idEmployeePersonnelLevel"],
        employeePersonnelLevelStart: json["employeePersonnelLevelStart"] == null
            ? null
            : DateTime.parse(json["employeePersonnelLevelStart"]),
        personnelLevelName: json["personnelLevelName"],
        personnelLevelGroupName: json["personnelLevelGroupName"],
        jobLevelName: json["jobLevelName"],
        jobGroupLevelName: json["jobGroupLevelName"],
        paymentTypeName: json["paymentTypeName"],
        paymentRoundName: json["paymentRoundName"],
        groupGpsLocationsName: json["groupGpsLocationsName"],
        managerLv1IdManagerLv1: json["managerLV1_idManagerLV1"],
        managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
        managerLv1LastnameTh: json["managerLV1_lastname_TH"],
        managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
        managerLv1LastnameEn: json["managerLV1_lastname_EN"],
        managerLv1Email: json["managerLV1_email"],
        managerLv2IdManagerLv2: json["managerLV2_idManagerLV2"],
        managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
        managerLv2LastnameTh: json["managerLV2_lastname_TH"],
        managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
        managerLv2LastnameEn: json["managerLV2_lastname_EN"],
        managerLv2Email: json["managerLV2_email"],
        managerLv1PositionName: json["managerLV1_positionName"],
        managerLv2PositionName: json["managerLV2_positionName"],
        idEmployeeSalary: json["idEmployeeSalary"],
        idManagerGroupLv1: json["idManagerGroupLV1"],
        idManagerGroupLv2: json["idManagerGroupLV2"],
        managerGroupLv1ManagerGroupName:
            json["managerGroupLV1_managerGroupName"],
        managerGroupLv2ManagerGroupName:
            json["managerGroupLV2_managerGroupName"],
        educations: json["educations"] == null
            ? []
            : List<EducationModel>.from(
                json["educations"]!.map((x) => EducationModel.fromJson(x))),
        shift:
            json["shift"] == null ? null : ShiftModel.fromJson(json["shift"]),
        family: json["family"] == null
            ? []
            : List<dynamic>.from(json["family"]!.map((x) => x)),
        experience: json["experience"] == null
            ? []
            : List<ExperienceModel>.from(
                json["experience"]!.map((x) => ExperienceModel.fromJson(x))),
        roles: json["roles"] == null
            ? []
            : List<dynamic>.from(json["roles"]!.map((x) => x)),
        imageProfile: json["imageProfile"],
      );

  Map<String, dynamic> toJson() => {
        "idEmployees": idEmployees,
        "employeeID": employeeId,
        "title_TH": titleTh,
        "firstname_TH": firstnameTh,
        "lastname_TH": lastnameTh,
        "nickname_TH": nicknameTh,
        "title_EN": titleEn,
        "firstname_EN": firstnameEn,
        "lastname_EN": lastnameEn,
        "nickname_EN": nicknameEn,
        "gender": gender,
        "personalID": personalId,
        "nationality": nationality,
        "maritalStatus": maritalStatus,
        "passportNumber": passportNumber,
        "workPermitNumber": workPermitNumber,
        "taxID": taxId,
        "ssoID": ssoId,
        "birthday": birthday?.toIso8601String(),
        "address": address,
        "houseNo": houseNo,
        "village": village,
        "villageNo": villageNo,
        "alley": alley,
        "road": road,
        "subDistrict": subDistrict,
        "district": district,
        "provience": provience,
        "areaCode": areaCode,
        "telephoneMobile": telephoneMobile,
        "username": username,
        "email": email,
        "emergencyContact": emergencyContact,
        "emergencyRelationship": emergencyRelationship,
        "emergencyPhone": emergencyPhone,
        "numberOfChildren": numberOfChildren,
        "spouseFirstname": spouseFirstname,
        "spouseLastname": spouseLastname,
        "spouseBirthday": spouseBirthday,
        "spouseTaxID": spouseTaxId,
        "employmentTime": employmentTime,
        "timeScan": timeScan,
        "workingLocation": workingLocation,
        "filed_office": filedOffice,
        "hiringDate": hiringDate?.toIso8601String(),
        "workingType": workingType,
        "salary": salary,
        "contractType": contractType,
        "retirementDate": retirementDate,
        "contractTermainatoinDate": contractTermainatoinDate,
        "resignDate": resignDate,
        "bookBank": bookBank,
        "bookBankBranchName": bookBankBranchName,
        "bookID": bookId,
        "reportBankBankName": reportBankBankName,
        "reportBankBankID": reportBankBankId,
        "reportBankBookBankID": reportBankBookBankId,
        "reportBankName": reportBankName,
        "reportBankRef": reportBankRef,
        "costCenterCharge": costCenterCharge,
        "costElementCharge": costElementCharge,
        "io": io,
        "idEmploymentType": idEmploymentType,
        "idPaymentType": idPaymentType,
        "idJobLevel": idJobLevel,
        "idPersonnelLevel": idPersonnelLevel,
        "idCompany": idCompany,
        "idBranch": idBranch,
        "idRole": idRole,
        "idManagerLV1": idManagerLv1,
        "idManagerLV2": idManagerLv2,
        "password": password,
        "isActive": isActive,
        "createDate": createDate,
        "createBy": createBy,
        "updateDate": updateDate?.toIso8601String(),
        "updateBy": updateBy,
        "lineUserId": lineUserId,
        "mainWorkingLocationPoint": mainWorkingLocationPoint,
        "methodAttendance": methodAttendance,
        "imageName": imageName,
        "Serv_Y": servY,
        "Serv_M": servM,
        "OESY_Y": oesyY,
        "OESY_M": oesyM,
        "userPF": userPf,
        "ServPFDate": servPfDate?.toIso8601String(),
        "PFDate": pfDate?.toIso8601String(),
        "criminalImage": criminalImage,
        "isFinger": isFinger,
        "isFingerAffectPayroll": isFingerAffectPayroll,
        "probationR1Date": probationR1Date,
        "probationR1Approved": probationR1Approved,
        "probationR1Result": probationR1Result,
        "probationR2Date": probationR2Date,
        "probationR2Approved": probationR2Approved,
        "probationR2Result": probationR2Result,
        "expandTimeProbation": expandTimeProbation,
        "reasonResign": reasonResign,
        "reasonResignOther": reasonResignOther,
        "reasonTerminate": reasonTerminate,
        "reasonTerminateOther": reasonTerminateOther,
        "isBlacklist": isBlacklist,
        "estimatePerformanceResult": estimatePerformanceResult,
        "estimatePerformanceApproved": estimatePerformanceApproved,
        "updateEstimatePerformance":
            updateEstimatePerformance?.toIso8601String(),
        "isOpenRegisterManpower": isOpenRegisterManpower,
        "overview": overview,
        "isExit": isExit,
        "isPayroll": isPayroll,
        "idPosition": idPosition,
        "positionName": positionName,
        "positionName_EN": positionName_EN,
        "sectionName": sectionName,
        "departmentName": departmentName,
        "divisionName": divisionName,
        "companyName": companyName,
        "idEmployeeEmploymentType": idEmployeeEmploymentType,
        "employmentTypeName": employmentTypeName,
        "idEmployeePosition": idEmployeePosition,
        "employeePositionStart": employeePositionStart?.toIso8601String(),
        "idEmployeePersonnelLevel": idEmployeePersonnelLevel,
        "employeePersonnelLevelStart":
            employeePersonnelLevelStart?.toIso8601String(),
        "personnelLevelName": personnelLevelName,
        "personnelLevelGroupName": personnelLevelGroupName,
        "jobLevelName": jobLevelName,
        "jobGroupLevelName": jobGroupLevelName,
        "paymentTypeName": paymentTypeName,
        "paymentRoundName": paymentRoundName,
        "groupGpsLocationsName": groupGpsLocationsName,
        "managerLV1_idManagerLV1": managerLv1IdManagerLv1,
        "managerLV1_firstname_TH": managerLv1FirstnameTh,
        "managerLV1_lastname_TH": managerLv1LastnameTh,
        "managerLV1_firstname_EN": managerLv1FirstnameEn,
        "managerLV1_lastname_EN": managerLv1LastnameEn,
        "managerLV1_email": managerLv1Email,
        "managerLV2_idManagerLV2": managerLv2IdManagerLv2,
        "managerLV2_firstname_TH": managerLv2FirstnameTh,
        "managerLV2_lastname_TH": managerLv2LastnameTh,
        "managerLV2_firstname_EN": managerLv2FirstnameEn,
        "managerLV2_lastname_EN": managerLv2LastnameEn,
        "managerLV2_email": managerLv2Email,
        "managerLV1_positionName": managerLv1PositionName,
        "managerLV2_positionName": managerLv2PositionName,
        "idEmployeeSalary": idEmployeeSalary,
        "idManagerGroupLV1": idManagerGroupLv1,
        "idManagerGroupLV2": idManagerGroupLv2,
        "managerGroupLV1_managerGroupName": managerGroupLv1ManagerGroupName,
        "managerGroupLV2_managerGroupName": managerGroupLv2ManagerGroupName,
        "educations": educations == null
            ? []
            : List<dynamic>.from(educations!.map((x) => x.toJson())),
        "shift": shift?.toJson(),
        "family":
            family == null ? [] : List<dynamic>.from(family!.map((x) => x)),
        "experience": experience == null
            ? []
            : List<dynamic>.from(experience!.map((x) => x.toJson())),
        "roles": roles == null ? [] : List<dynamic>.from(roles!.map((x) => x)),
        "imageProfile": imageProfile,
      };
}

class EducationModel extends Education {
  EducationModel({
    required int? idEducations,
    required String? degree,
    required String? university,
    required String? faculty,
    required String? major,
    required int? fromYear,
    required int? endYear,
    required String? gpa,
    required int? idEmployees,
  }) : super(
          idEducations: idEducations,
          degree: degree,
          university: university,
          faculty: faculty,
          major: major,
          fromYear: fromYear,
          endYear: endYear,
          gpa: gpa,
          idEmployees: idEmployees,
        );

  factory EducationModel.fromJson(Map<String, dynamic> json) => EducationModel(
        idEducations: json["idEducations"],
        degree: json["degree"],
        university: json["university"],
        faculty: json["faculty"],
        major: json["major"],
        fromYear: json["fromYear"],
        endYear: json["endYear"],
        gpa: json["gpa"],
        idEmployees: json["idEmployees"],
      );

  Map<String, dynamic> toJson() => {
        "idEducations": idEducations,
        "degree": degree,
        "university": university,
        "faculty": faculty,
        "major": major,
        "fromYear": fromYear,
        "endYear": endYear,
        "gpa": gpa,
        "idEmployees": idEmployees,
      };
}

class ExperienceModel extends Experience {
  ExperienceModel({
    required int? idExperiences,
    required String? positionName,
    required String? companyName,
    required String? description,
    required DateTime? startDate,
    required dynamic endDate,
    required int? idEmployees,
  }) : super(
          idExperiences: idExperiences,
          positionName: positionName,
          companyName: companyName,
          description: description,
          startDate: startDate,
          endDate: endDate,
          idEmployees: idEmployees,
        );

  factory ExperienceModel.fromJson(Map<String, dynamic> json) =>
      ExperienceModel(
        idExperiences: json["idExperiences"],
        positionName: json["positionName"],
        companyName: json["companyName"],
        description: json["description"],
        startDate: json["startDate"] == null
            ? null
            : DateTime.parse(json["startDate"]),
        endDate: json["endDate"],
        idEmployees: json["idEmployees"],
      );

  Map<String, dynamic> toJson() => {
        "idExperiences": idExperiences,
        "positionName": positionName,
        "companyName": companyName,
        "description": description,
        "startDate": startDate?.toIso8601String(),
        "endDate": endDate,
        "idEmployees": idEmployees,
      };
}

class ShiftModel extends Shift {
  ShiftModel({
    required int? idShift,
    required String? shiftName,
    required int? idShiftGroup,
    required String? shiftGroupName,
    required int? shiftStartInMonday,
    required DateTime? shiftStartDate,
    required int? workDay,
    required int? offDay,
    required int? shiftNumber,
    required dynamic remark,
    required int? idWorkingType,
    required int? idCompany,
    required int? workingHours,
    required int? breakTime,
    required dynamic createBy,
    required dynamic createDate,
    required int? isTimeFrame,
    required dynamic fixOt,
    required dynamic isPayShift,
    required String? timeIn,
    required String? timeOut,
  }) : super(
          idShift: idShift,
          shiftName: shiftName,
          idShiftGroup: idShiftGroup,
          shiftGroupName: shiftGroupName,
          shiftStartInMonday: shiftStartInMonday,
          shiftStartDate: shiftStartDate,
          workDay: workDay,
          offDay: offDay,
          shiftNumber: shiftNumber,
          remark: remark,
          idWorkingType: idWorkingType,
          idCompany: idCompany,
          workingHours: workingHours,
          breakTime: breakTime,
          createBy: createBy,
          createDate: createDate,
          isTimeFrame: isTimeFrame,
          fixOt: fixOt,
          isPayShift: isPayShift,
          timeIn: timeIn,
          timeOut: timeOut,
        );

  factory ShiftModel.fromJson(Map<String, dynamic> json) => ShiftModel(
        idShift: json["idShift"],
        shiftName: json["shiftName"],
        idShiftGroup: json["idShiftGroup"],
        shiftGroupName: json["shiftGroupName"],
        shiftStartInMonday: json["shiftStartInMonday"],
        shiftStartDate: json["shiftStartDate"] == null
            ? null
            : DateTime.parse(json["shiftStartDate"]),
        workDay: json["workDay"],
        offDay: json["offDay"],
        shiftNumber: json["shiftNumber"],
        remark: json["remark"],
        idWorkingType: json["idWorkingType"],
        idCompany: json["idCompany"],
        workingHours: json["workingHours"],
        breakTime: json["breakTime"],
        createBy: json["createBy"],
        createDate: json["createDate"],
        isTimeFrame: json["isTimeFrame"],
        fixOt: json["fixOT"],
        isPayShift: json["isPayShift"],
        timeIn: json["timeIn"],
        timeOut: json["timeOut"],
      );

  Map<String, dynamic> toJson() => {
        "idShift": idShift,
        "shiftName": shiftName,
        "idShiftGroup": idShiftGroup,
        "shiftGroupName": shiftGroupName,
        "shiftStartInMonday": shiftStartInMonday,
        "shiftStartDate": shiftStartDate?.toIso8601String(),
        "workDay": workDay,
        "offDay": offDay,
        "shiftNumber": shiftNumber,
        "remark": remark,
        "idWorkingType": idWorkingType,
        "idCompany": idCompany,
        "workingHours": workingHours,
        "breakTime": breakTime,
        "createBy": createBy,
        "createDate": createDate,
        "isTimeFrame": isTimeFrame,
        "fixOT": fixOt,
        "isPayShift": isPayShift,
        "timeIn": timeIn,
        "timeOut": timeOut,
      };
}
