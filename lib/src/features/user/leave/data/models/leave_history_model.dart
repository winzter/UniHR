import 'dart:convert';
import '../../domain/entities/entities.dart';

List<LeaveHistoryModel> leaveHistoryDataFromJson(String str) =>
    List<LeaveHistoryModel>.from(
        json.decode(str).map((x) => LeaveHistoryModel.fromJson(x)));

String leaveHistoryDataToJson(List<LeaveHistoryModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class LeaveHistoryModel extends LeaveHistoryEntity {
  LeaveHistoryModel({
    required int? idLeave,
    required int? idLeaveType,
    required String? description,
    required dynamic filename,
    required DateTime? start,
    required DateTime? end,
    required int? idEmployees,
    required double? used,
    required double? quota,
    required double? balance,
    required double? remaining,
    required dynamic carry,
    required int? idManager,
    required DateTime? approveDate,
    required int? isApprove,
    required int? isFullDay,
    required dynamic workingStart,
    required dynamic workingEnd,
    required int? isActive,
    required dynamic fillInApprove,
    required DateTime? createDate,
    required dynamic isWithdraw,
    required dynamic commentManager,
    required dynamic idHoliday,
    required String? name,
    required String? name_EN,
    required String? employeeId,
    required String? titleTh,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? titleEn,
    required String? firstnameEn,
    required String? lastnameEn,
    required dynamic holidayName,
    required String? managerFirstnameTh,
    required String? managerLastnameTh,
    required String? managerFirstnameEn,
    required String? managerLastnameEn,
    required String? startText,
    required String? endText,
    required String? createLeaveText,
    required dynamic fileUrl,
    required WithdrawCheckModel? withdraw,
  }) : super(
          idLeave: idLeave,
          idLeaveType: idLeaveType,
          description: description,
          filename: filename,
          start: start,
          end: end,
          idEmployees: idEmployees,
          used: used,
          quota: quota,
          balance: balance,
          remaining: remaining,
          carry: carry,
          idManager: idManager,
          approveDate: approveDate,
          isApprove: isApprove,
          isFullDay: isFullDay,
          workingStart: workingStart,
          workingEnd: workingEnd,
          isActive: isActive,
          fillInApprove: fillInApprove,
          createDate: createDate,
          isWithdraw: isWithdraw,
          commentManager: commentManager,
          idHoliday: idHoliday,
          name: name,
          name_EN: name_EN,
          employeeId: employeeId,
          titleTh: titleTh,
          firstnameTh: firstnameTh,
          lastnameTh: lastnameTh,
          titleEn: titleEn,
          firstnameEn: firstnameEn,
          lastnameEn: lastnameEn,
          holidayName: holidayName,
          managerFirstnameTh: managerFirstnameTh,
          managerLastnameTh: managerLastnameTh,
          managerFirstnameEn: managerFirstnameEn,
          managerLastnameEn: managerLastnameEn,
          startText: startText,
          endText: endText,
          createLeaveText: createLeaveText,
          fileUrl: fileUrl,
          withdraw: withdraw,
        );

  factory LeaveHistoryModel.fromJson(Map<String, dynamic> json) =>
      LeaveHistoryModel(
        idLeave: json["idLeave"],
        idLeaveType: json["idLeaveType"],
        description: json["description"],
        filename: json["filename"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        idEmployees: json["idEmployees"],
        used: json["used"]?.toDouble(),
        quota: json["quota"]?.toDouble(),
        balance: json["balance"]?.toDouble(),
        remaining: json["remaining"]?.toDouble(),
        carry: json["carry"],
        idManager: json["idManager"],
        approveDate: json["approveDate"] == null
            ? null
            : DateTime.parse(json["approveDate"]),
        isApprove: json["isApprove"],
        isFullDay: json["isFullDay"],
        workingStart: json["workingStart"],
        workingEnd: json["workingEnd"],
        isActive: json["isActive"],
        fillInApprove: json["fillInApprove"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isWithdraw: json["isWithdraw"],
        commentManager: json["commentManager"],
        idHoliday: json["idHoliday"],
        name: json["name"],
        name_EN: json["name_EN"],
        employeeId: json["employeeID"],
        titleTh: json["title_TH"],
        firstnameTh: json["firstname_TH"],
        lastnameTh: json["lastname_TH"],
        titleEn: json["title_EN"],
        firstnameEn: json["firstname_EN"],
        lastnameEn: json["lastname_EN"],
        holidayName: json["holidayName"],
        managerFirstnameTh: json["manager_firstname_TH"],
        managerLastnameTh: json["manager_lastname_TH"],
        managerFirstnameEn: json["manager_firstname_EN"],
        managerLastnameEn: json["manager_lastname_EN"],
        startText: json["startText"],
        endText: json["endText"],
        createLeaveText: json["createLeaveText"],
        fileUrl: json["fileURL"],
        withdraw: json["withdraw"] == null
            ? null
            : WithdrawCheckModel.fromJson(json["withdraw"]),
      );

  Map<String, dynamic> toJson() => {
        "idLeave": idLeave,
        "idLeaveType": idLeaveType,
        "description": description,
        "filename": filename,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "idEmployees": idEmployees,
        "used": used,
        "quota": quota,
        "balance": balance,
        "remaining": remaining,
        "carry": carry,
        "idManager": idManager,
        "approveDate": approveDate?.toIso8601String(),
        "isApprove": isApprove,
        "isFullDay": isFullDay,
        "workingStart": workingStart,
        "workingEnd": workingEnd,
        "isActive": isActive,
        "fillInApprove": fillInApprove,
        "createDate": createDate?.toIso8601String(),
        "isWithdraw": isWithdraw,
        "commentManager": commentManager,
        "idHoliday": idHoliday,
        "name": name,
        "name_EN": name_EN,
        "employeeID": employeeId,
        "title_TH": titleTh,
        "firstname_TH": firstnameTh,
        "lastname_TH": lastnameTh,
        "title_EN": titleEn,
        "firstname_EN": firstnameEn,
        "lastname_EN": lastnameEn,
        "holidayName": holidayName,
        "manager_firstname_TH": managerFirstnameTh,
        "manager_lastname_TH": managerLastnameTh,
        "manager_firstname_EN": managerFirstnameEn,
        "manager_lastname_EN": managerLastnameEn,
        "startText": startText,
        "endText": endText,
        "createLeaveText": createLeaveText,
        "fileURL": fileUrl,
      };
}

class WithdrawCheckModel extends WithdrawCheckEntity {
  WithdrawCheckModel({
    required super.idLeaveEmployeesWithdraw,
    required super.idLeave,
    required super.managerApprove,
    required super.isApprove,
    required super.approveDate,
    required super.fillInCreate,
    required super.fillInApprove,
    required super.createDate,
    required super.isActive,
    required super.commentManager,
  });

  factory WithdrawCheckModel.fromJson(Map<String, dynamic> json) =>
      WithdrawCheckModel(
        idLeaveEmployeesWithdraw: json["idLeaveEmployeesWithdraw"],
        idLeave: json["idLeave"],
        managerApprove: json["managerApprove"],
        isApprove: json["isApprove"],
        approveDate: json["approveDate"] == null
            ? null
            : DateTime.parse(json["approveDate"]),
        fillInCreate: json["fillInCreate"],
        fillInApprove: json["fillInApprove"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isActive: json["isActive"],
        commentManager: json["commentManager"],
      );

  Map<String, dynamic> toJson() => {
        "idLeaveEmployeesWithdraw": idLeaveEmployeesWithdraw,
        "idLeave": idLeave,
        "managerApprove": managerApprove,
        "isApprove": isApprove,
        "approveDate": approveDate?.toIso8601String(),
        "fillInCreate": fillInCreate,
        "fillInApprove": fillInApprove,
        "createDate": createDate?.toIso8601String(),
        "isActive": isActive,
        "commentManager": commentManager,
      };
}
