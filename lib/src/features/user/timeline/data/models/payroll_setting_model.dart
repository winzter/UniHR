import 'dart:convert';

import 'package:unihr/src/features/user/timeline/domain/entities/entities.dart';

PayrollSettingModel payrollSettingModelFromJson(String str) => PayrollSettingModel.fromJson(json.decode(str));

String payrollSettingModelToJson(PayrollSettingModel data) => json.encode(data.toJson());

class PayrollSettingModel extends PayrollSetting{
  PayrollSettingModel({
    required super.idPayrollSetting,
    required super.idCompany,
    required super.xWorkingDailyHoliday,
    required super.xWorkingMonthlyHoliday,
    required super.xOt,
    required super.xOtHoliday,
    required super.morningShiftFee,
    required super.afternoonShiftFee,
    required super.nightShiftFee,
    required super.delayTimes,
    required super.decimalRounding,
    required super.decimalNumber,
    required super.paymentRound,
    required super.firstCutRoundDate,
    required super.firstCutOff,
    required super.firstCutOffNextMonth,
    required super.secondCutOff,
    required super.firstRoundOt,
    required super.firstRoundLateAbsentLeave,
    required super.firstPayDate,
    required super.firstPayDateNextMonth,
    required super.secondPayDate,
    required super.earlyCheckIn,
    required super.isLeavePayResign,
    required super.firstPayslipDate,
    required super.firstPayslipTime,
    required super.firstPayslipNextMonth,
    required super.fitstPaysilpPublicType,
    required super.secondPayslipDate,
    required super.secondPayslipTime,
    required super.firstAddition,
    required super.secondAddition,
    required super.firstDeduction,
    required super.secondDeduction,
    required super.isPayShift,
    required super.lateDockSalary,
    required super.lateSso,
    required super.lateTax,
    required super.latePf,
    required super.absentDockSalary,
    required super.absentSso,
    required super.absentTax,
    required super.absentPf,
    required super.calculateOt,
    required super.otSso,
    required super.otTax,
    required super.otPf,
    required super.calculateShiftFee,
    required super.shiftFeeSso,
    required super.shiftFeeTax,
    required super.shiftFeePf,
    required super.calculateDiligence,
    required super.diligenceMethod,
    required super.diligenceSso,
    required super.diligenceTax,
    required super.diligencePf,
    required super.payDayoff,
    required super.payment,
  });

  factory PayrollSettingModel.fromJson(Map<String, dynamic> json) => PayrollSettingModel(
    idPayrollSetting: json["idPayrollSetting"],
    idCompany: json["idCompany"],
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"],
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"]?.toDouble(),
    xOt: json["xOT"]?.toDouble(),
    xOtHoliday: json["xOTHoliday"],
    morningShiftFee: json["morningShiftFee"],
    afternoonShiftFee: json["afternoonShiftFee"],
    nightShiftFee: json["nightShiftFee"],
    delayTimes: json["delayTimes"],
    decimalRounding: json["decimalRounding"],
    decimalNumber: json["decimalNumber"],
    paymentRound: json["paymentRound"],
    firstCutRoundDate: json["firstCutRoundDate"],
    firstCutOff: json["firstCutOff"],
    firstCutOffNextMonth: json["firstCutOffNextMonth"],
    secondCutOff: json["secondCutOff"],
    firstRoundOt: json["firstRoundOt"],
    firstRoundLateAbsentLeave: json["firstRoundLateAbsentLeave"],
    firstPayDate: json["firstPayDate"],
    firstPayDateNextMonth: json["firstPayDateNextMonth"],
    secondPayDate: json["secondPayDate"],
    earlyCheckIn: json["earlyCheckIn"],
    isLeavePayResign: json["isLeavePayResign"],
    firstPayslipDate: json["firstPayslipDate"],
    firstPayslipTime: json["firstPayslipTime"],
    firstPayslipNextMonth: json["firstPayslipNextMonth"],
    fitstPaysilpPublicType: json["fitstPaysilpPublicType"],
    secondPayslipDate: json["secondPayslipDate"],
    secondPayslipTime: json["secondPayslipTime"],
    firstAddition: json["firstAddition"],
    secondAddition: json["secondAddition"],
    firstDeduction: json["firstDeduction"],
    secondDeduction: json["secondDeduction"],
    isPayShift: json["isPayShift"],
    lateDockSalary: json["lateDockSalary"],
    lateSso: json["lateSso"],
    lateTax: json["lateTax"],
    latePf: json["latePf"],
    absentDockSalary: json["absentDockSalary"],
    absentSso: json["absentSso"],
    absentTax: json["absentTax"],
    absentPf: json["absentPf"],
    calculateOt: json["calculateOt"],
    otSso: json["otSso"],
    otTax: json["otTax"],
    otPf: json["otPf"],
    calculateShiftFee: json["calculateShiftFee"],
    shiftFeeSso: json["shiftFeeSso"],
    shiftFeeTax: json["shiftFeeTax"],
    shiftFeePf: json["shiftFeePf"],
    calculateDiligence: json["calculateDiligence"],
    diligenceMethod: json["diligenceMethod"],
    diligenceSso: json["diligenceSso"],
    diligenceTax: json["diligenceTax"],
    diligencePf: json["diligencePf"],
    payDayoff: json["payDayoff"],
    payment: json["payment"] == null ? [] : List<dynamic>.from(json["payment"]!.map((x) => x)),
  );

  Map<String, dynamic> toJson() => {
    "idPayrollSetting": idPayrollSetting,
    "idCompany": idCompany,
    "xWorkingDailyHoliday": xWorkingDailyHoliday,
    "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
    "xOT": xOt,
    "xOTHoliday": xOtHoliday,
    "morningShiftFee": morningShiftFee,
    "afternoonShiftFee": afternoonShiftFee,
    "nightShiftFee": nightShiftFee,
    "delayTimes": delayTimes,
    "decimalRounding": decimalRounding,
    "decimalNumber": decimalNumber,
    "paymentRound": paymentRound,
    "firstCutRoundDate": firstCutRoundDate,
    "firstCutOff": firstCutOff,
    "firstCutOffNextMonth": firstCutOffNextMonth,
    "secondCutOff": secondCutOff,
    "firstRoundOt": firstRoundOt,
    "firstRoundLateAbsentLeave": firstRoundLateAbsentLeave,
    "firstPayDate": firstPayDate,
    "firstPayDateNextMonth": firstPayDateNextMonth,
    "secondPayDate": secondPayDate,
    "earlyCheckIn": earlyCheckIn,
    "isLeavePayResign": isLeavePayResign,
    "firstPayslipDate": firstPayslipDate,
    "firstPayslipTime": firstPayslipTime,
    "firstPayslipNextMonth": firstPayslipNextMonth,
    "fitstPaysilpPublicType": fitstPaysilpPublicType,
    "secondPayslipDate": secondPayslipDate,
    "secondPayslipTime": secondPayslipTime,
    "firstAddition": firstAddition,
    "secondAddition": secondAddition,
    "firstDeduction": firstDeduction,
    "secondDeduction": secondDeduction,
    "isPayShift": isPayShift,
    "lateDockSalary": lateDockSalary,
    "lateSso": lateSso,
    "lateTax": lateTax,
    "latePf": latePf,
    "absentDockSalary": absentDockSalary,
    "absentSso": absentSso,
    "absentTax": absentTax,
    "absentPf": absentPf,
    "calculateOt": calculateOt,
    "otSso": otSso,
    "otTax": otTax,
    "otPf": otPf,
    "calculateShiftFee": calculateShiftFee,
    "shiftFeeSso": shiftFeeSso,
    "shiftFeeTax": shiftFeeTax,
    "shiftFeePf": shiftFeePf,
    "calculateDiligence": calculateDiligence,
    "diligenceMethod": diligenceMethod,
    "diligenceSso": diligenceSso,
    "diligenceTax": diligenceTax,
    "diligencePf": diligencePf,
    "payDayoff": payDayoff,
    "payment": payment == null ? [] : List<dynamic>.from(payment!.map((x) => x)),
  };
}
