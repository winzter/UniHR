import 'dart:convert';
import '../../domain/entities/timeline_entity.dart';

List<TimeLineModel> timelineFromJson(String str) => List<TimeLineModel>.from(json.decode(str).map((x) => TimeLineModel.fromJson(x)));

// String attendanceToJson(List<AttendanceModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class TimeLineModel extends TimeLineEntity{

  const TimeLineModel({
    required super.date,
    required super.holiday,
    required super.pattern,
    required super.requestTime,
    required super.requestCompensate,
    required super.attendance,
    required super.leave,
    required super.ot,
    required super.employee,
    required super.isCompensation,
    required super.attendanceDisplay,
    required super.absent,
    required super.isLate,
    required super.isEarlyOut,
  });

  factory TimeLineModel.fromJson(Map<String, dynamic> json) => TimeLineModel(
    date: json["date"] == null ? null : DateTime.parse(json["date"]),
    holiday: json["holiday"] == null ? null : HolidayModel.fromJson(json["holiday"]),
    pattern: json["pattern"] == null ? null : PatternModel.fromJson(json["pattern"]),
    requestTime: json["requestTime"] == null ? [] : List<OtModel>.from(json["requestTime"]!.map((x) => OtModel.fromJson(x))),
    requestCompensate: json["requestCompensate"] == null ? [] : List<RequestCompensateModel>.from(json["requestCompensate"]!.map((x) => RequestCompensateModel.fromJson(x))),
    attendance: json["attendance"] == null ? null : AttendanceClassModel.fromJson(json["attendance"]),
    leave: json["leave"] == null ? [] : List<LeaveModel>.from(json["leave"]!.map((x) => LeaveModel.fromJson(x))),
    ot: json["ot"] == null ? [] : List<OtModel>.from(json["ot"]!.map((x) => OtModel.fromJson(x))),
    employee: json["employee"] == null ? null : EmployeeModel.fromJson(json["employee"]),
    isCompensation: json["isCompensation"],
    attendanceDisplay: json["attendanceDisplay"] == null ? [] : List<AttendanceDisplayModel>.from(json["attendanceDisplay"]!.map((x) => AttendanceDisplayModel.fromJson(x))),
    absent: json["absent"],
    isLate: json["isLate"],
    isEarlyOut: json["isEarlyOut"],
  );

  // Map<String, dynamic> toJson() => {
  //   "date": "${date!.year.toString().padLeft(4, '0')}-${date!.month.toString().padLeft(2, '0')}-${date!.day.toString().padLeft(2, '0')}",
  //   "holiday": holiday?.toJson(),
  //   "pattern": pattern?.toJson(),
  //   "requestTime": requestTime?.toJson(),
  //   "attendance": attendance?.toJson(),
  //   "leave": leave?.toJson(),
  //   "ot": ot == null ? [] : List<dynamic>.from(ot!.map((x) => x.toJson())),
  //   "absent": absent,
  //   "employee": employee?.toJson(),
  //   "isCompensation": isCompensation,
  //   "isLate": isLate,
  //   "isEarlyOut": isEarlyOut,
  // };


}

class RequestCompensateModel extends RequestCompensate{

  RequestCompensateModel({
    // required super.idRequestTime,
    required super.start,
    required super.end,
    required super.workDate,
    // required super.idRequestReason,
    // required super.idRequestType,
    required super.otherReason,
    // required super.idEmployees,
    required super.isManagerLv1Approve,
    required super.isManagerLv2Approve,
    required super.amountHours,
    required super.xOt,
    required super.xOtHoliday,
    required super.xWorkingDailyHoliday,
    required super.xWorkingMonthlyHoliday,
    required super.isActive,
    required super.managerLv1ApproveBy,
    required super.managerLv1ApproveDate,
    required super.managerLv1ReApproveDate,
    required super.managerLv1ReApprove,
    required super.managerLv2ApproveBy,
    required super.managerLv2ApproveDate,
    required super.managerLv2ReApproveDate,
    required super.managerLv2ReApprove,
    required super.requestTimecol,
    required super.createDate,
    required super.isDoubleApproval,
    required super.approvalLevel,
    // required super.fillInCreate,
    // required super.fillInApproveLv1,
    // required super.fillInApproveLv2,
    required super.isWithdraw,
    required super.payShift,
    required super.commentManagerLv1,
    required super.commentManagerLv2,
    required super.idManagerGroupLv1,
    required super.idManagerGroupLv2,
    required super.name,
    required super.reasonName,
    required super.managerLv1FirstnameTh,
    required super.managerLv1LastnameTh,
    required super.managerLv1FirstnameEn,
    required super.managerLv1LastnameEn,
    required super.managerLv1Email,
    required super.managerLv2FirstnameTh,
    required super.managerLv2LastnameTh,
    required super.managerLv2FirstnameEn,
    required super.managerLv2LastnameEn,
    required super.managerLv2Email,
    required super.createDateText,
    required super.startText,
    required super.endText,
  });

  factory RequestCompensateModel.fromJson(Map<String, dynamic> json) => RequestCompensateModel(
    // idRequestTime: json["idRequestTime"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    workDate: json["workDate"] == null ? null : DateTime.parse(json["workDate"]),
    // idRequestReason: json["idRequestReason"],
    // idRequestType: json["idRequestType"],
    otherReason: json["otherReason"],
    // idEmployees: json["idEmployees"],
    isManagerLv1Approve: json["isManagerLV1Approve"],
    isManagerLv2Approve: json["isManagerLV2Approve"],
    amountHours: json["amountHours"]?.toDouble(),
    xOt: json["xOT"]?.toDouble(),
    xOtHoliday: json["xOTHoliday"]?.toDouble(),
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"]?.toDouble(),
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"]?.toDouble(),
    isActive: json["isActive"],
    managerLv1ApproveBy: json["managerLV1ApproveBy"],
    managerLv1ApproveDate: json["managerLV1ApproveDate"],
    managerLv1ReApproveDate: json["managerLV1ReApproveDate"],
    managerLv1ReApprove: json["managerLV1ReApprove"],
    managerLv2ApproveBy: json["managerLV2ApproveBy"],
    managerLv2ApproveDate: json["managerLV2ApproveDate"],
    managerLv2ReApproveDate: json["managerLV2ReApproveDate"],
    managerLv2ReApprove: json["managerLV2ReApprove"],
    requestTimecol: json["RequestTimecol"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    isDoubleApproval: json["isDoubleApproval"],
    approvalLevel: json["approvalLevel"],
    // fillInCreate: json["fillInCreate"],
    // fillInApproveLv1: json["fillInApproveLV1"],
    // fillInApproveLv2: json["fillInApproveLV2"],
    isWithdraw: json["isWithdraw"],
    payShift: json["payShift"],
    commentManagerLv1: json["commentManagerLV1"],
    commentManagerLv2: json["commentManagerLV2"],
    idManagerGroupLv1: json["idManagerGroupLV1"],
    idManagerGroupLv2: json["idManagerGroupLV2"],
    name: json["name"],
    reasonName: json["reasonName"],
    managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
    managerLv1LastnameTh: json["managerLV1_lastname_TH"],
    managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
    managerLv1LastnameEn: json["managerLV1_lastname_EN"],
    managerLv1Email: json["managerLV1_email"],
    managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
    managerLv2LastnameTh: json["managerLV2_lastname_TH"],
    managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
    managerLv2LastnameEn: json["managerLV2_lastname_EN"],
    managerLv2Email: json["managerLV2_email"],
    createDateText: json["createDateText"],
    startText: json["startText"],
    endText: json["endText"],
  );
}

class AttendanceDisplayModel extends AttendanceDisplay{


AttendanceDisplayModel({
  required super.checkIn,
  required super.checkOut,
  });

  factory AttendanceDisplayModel.fromJson(Map<String, dynamic> json) => AttendanceDisplayModel(
    checkIn: json["checkIn"] == null ? null : CheckModel.fromJson(json["checkIn"]),
    checkOut: json["checkOut"] == null ? null : CheckModel.fromJson(json["checkOut"]),
  );

  // Map<String, dynamic> toJson() => {
  //   "checkIn": checkIn?.toJson(),
  //   "checkOut": checkOut?.toJson(),
  // };
}

class AttendanceClassModel extends AttendanceClassEntity {
  AttendanceClassModel({
    required super.checkIn,
    required super.checkOut,
  });

  factory AttendanceClassModel.fromJson(Map<String, dynamic> json) {
    return AttendanceClassModel(
    checkIn: json["checkIn"] == null ? [] : List<CheckModel?>.from(json["checkIn"]!.map((x) => x == null ? null : CheckModel.fromJson(x))),
      checkOut: json["checkOut"] == null ? [] : List<CheckModel?>.from(json["checkOut"]!.map((x) => x == null ? null : CheckModel.fromJson(x))),
    );
  }

  // Map<String, dynamic> toJson() => {
  //   "checkIn": checkIn == null ? [] : List<dynamic>.from(checkIn!.map((x) => x.toJson())),
  //   "checkOut": checkOut == null ? [] : List<dynamic>.from(checkOut!.map((x) => x.toJson())),
  // };
}

class CheckModel extends CheckEntity {

  const CheckModel(
  {
    // required super.idAttendance,
    required super.attendanceDateTime,
    required super.isCheckIn,
    required super.workDay,
    required super.idAttendanceType,
    // required super.idGpsLocations,
    // required super.idEmployees,
    // required super.idCompany,
    // required super.idShift,
    // required super.idGroupGpsLocations,
    required super.gpsAddress,
    // required super.latitude,
    // required super.longitude,
    required super.gpsLocationsName,
    required super.groupGpsLocationsName,
    required super.attendanceTextTime,
    required super.attendanceTextDateTime,
  }
  );

  factory CheckModel.fromJson(Map<String, dynamic> json) => CheckModel(
    // idAttendance: json["idAttendance"],
    attendanceDateTime: json["attendanceDateTime"] == null ? null : DateTime.parse(json["attendanceDateTime"]),
    isCheckIn: json["isCheckIn"],
    workDay: json["workDay"],
    idAttendanceType: json["idAttendanceType"],
    // idGpsLocations: json["idGpsLocations"],
    // idEmployees: json["idEmployees"],
    // idCompany: json["idCompany"],
    // idShift: json["idShift"],
    // idGroupGpsLocations: json["idGroupGpsLocations"],
    gpsAddress: json["gpsAddress"],
    // latitude: json["latitude"],
    // longitude: json["longitude"],
    gpsLocationsName: json["gpsLocationsName"],
    groupGpsLocationsName: json["groupGpsLocationsName"],
    attendanceTextTime: json["attendanceTextTime"],
    attendanceTextDateTime: json["attendanceTextDateTime"] == null ? null : DateTime.parse(json["attendanceTextDateTime"]),
  );

  Map<String, dynamic> toJson() => {
    // "idAttendance": idAttendance,
    "attendanceDateTime": attendanceDateTime?.toIso8601String(),
    "isCheckIn": isCheckIn,
    "workDay": workDay,
    "idAttendanceType": idAttendanceType,
    // "idGpsLocations": idGpsLocations,
    // "idEmployees": idEmployees,
    // "idCompany": idCompany,
    // "idShift": idShift,
    // "idGroupGpsLocations": idGroupGpsLocations,
    "gpsLocationsName": gpsLocationsName,
    "groupGpsLocationsName": groupGpsLocationsName,
    "attendanceTextTime": attendanceTextTime,
  };
}

class EmployeeModel extends EmployeeEntity {

  const EmployeeModel({
    required int? idEmployees,
    required String? employeeId,
    required String? titleTh,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? nicknameTh,
    required String? titleEn,
    required String? firstnameEn,
    required String? lastnameEn,
    required String? nicknameEn,
    required String? gender,
    required String? personalId,
    required String? nationality,
    required String? maritalStatus,
    required String? passportNumber,
    required String? workPermitNumber,
    required String? taxId,
    required String? ssoId,
    required DateTime? birthday,
    required dynamic address,
    required String? houseNo,
    required String? village,
    required String? villageNo,
    required String? alley,
    required String? road,
    required String? subDistrict,
    required String? district,
    required String? provience,
    required String? areaCode,
    required String? telephoneMobile,
    required String? username,
    required String? email,
    required String? emergencyContact,
    required String? emergencyRelationship,
    required String? emergencyPhone,
    required dynamic numberOfChildren,
    required dynamic spouseFirstname,
    required dynamic spouseLastname,
    required dynamic spouseBirthday,
    required dynamic spouseTaxId,
    required String? employmentTime,
    required dynamic timeScan,
    required String? workingLocation,
    required String? filedOffice,
    required DateTime? hiringDate,
    required String? workingType,
    required int? salary,
    required dynamic contractType,
    required dynamic retirementDate,
    required dynamic contractTermainatoinDate,
    required dynamic resignDate,
    required String? bookBank,
    required String? bookBankBranchName,
    required String? bookId,
    required String? reportBankBankName,
    required String? reportBankBankId,
    required String? reportBankBookBankId,
    required String? reportBankName,
    required String? reportBankRef,
    required dynamic costCenterCharge,
    required dynamic costElementCharge,
    required dynamic io,
    required int? idEmploymentType,
    required int? idPaymentType,
    required int? idJobLevel,
    required int? idPersonnelLevel,
    required int? idCompany,
    required dynamic idBranch,
    required int? idRole,
    required int? idManagerLv1,
    required dynamic idManagerLv2,
    required String? password,
    required int? isActive,
    required dynamic createDate,
    required dynamic createBy,
    required DateTime? updateDate,
    required int? updateBy,
    required dynamic lineUserId,
    required int? mainWorkingLocationPoint,
    required String? methodAttendance,
    required String? imageName,
    required dynamic servY,
    required dynamic servM,
    required int? oesyY,
    required int? oesyM,
    required dynamic userPf,
    required DateTime? servPfDate,
    required DateTime? pfDate,
    required dynamic criminalImage,
    required int? isFinger,
    required int? isFingerAffectPayroll,
    // required dynamic probationR1Date,
    // required int? probationR1Approved,
    // required String? probationR1Result,
    // required int? probationR1ApproveBy,
    // required DateTime? probationR1ApproveDate,
    // required String? probationR1Remark,
    // required dynamic probationR2Date,
    // required int? probationR2Approved,
    // required String? probationR2Result,
    // required int? probationR2ApproveBy,
    // required DateTime? probationR2ApproveDate,
    // required String? probationR2Remark,
    // required int? expandTimeProbation,
    // required dynamic probationR1Date,
    // required int? probationR1Approved,
    // required String? probationR1Result,
    // required int? probationR1ApproveBy,
    // required DateTime? probationR1ApproveDate,
    // required String? probationR1Remark,
    // required dynamic probationR2Date,
    // required int? probationR2Approved,
    // required String? probationR2Result,
    // required int? probationR2ApproveBy,
    // required DateTime? probationR2ApproveDate,
    // required String? probationR2Remark,
    // required int? expandTimeProbation,
    required dynamic reasonResign,
    required dynamic reasonResignOther,
    required dynamic reasonTerminate,
    required dynamic reasonTerminateOther,
    required int? isBlacklist,
    required dynamic estimatePerformanceResult,
    required int? estimatePerformanceApproved,
    required DateTime? updateEstimatePerformance,
    required int? isOpenRegisterManpower,
    required String? overview,
    required int? isExit,
    required dynamic isPayroll,
    required int? isTax,
    required int? isSelfTaxPaid,
    required int? isSso,
    required int? isPf,
    required String? incomeUnderSection,
    required int? uniwelfareFlexcoins,
    required int? idPosition,
    required String? positionName,
    required String? sectionName,
    required String? departmentName,
    required String? divisionName,
    required String? companyName,
    required int? idEmployeeEmploymentType,
    required String? employmentTypeName,
    required int? idEmployeePosition,
    required DateTime? employeePositionStart,
    required int? idEmployeePersonnelLevel,
    required DateTime? employeePersonnelLevelStart,
    required String? personnelLevelName,
    required String? personnelLevelGroupName,
    required String? jobLevelName,
    required String? jobGroupLevelName,
    required String? paymentTypeName,
    required String? paymentRoundName,
    required String? groupGpsLocationsName,
    required int? managerLv1IdManagerLv1,
    required String? managerLv1FirstnameTh,
    required String? managerLv1LastnameTh,
    required String? managerLv1FirstnameEn,
    required String? managerLv1LastnameEn,
    required String? managerLv1Email,
    required int? managerLv2IdManagerLv2,
    required String? managerLv2FirstnameTh,
    required String? managerLv2LastnameTh,
    required String? managerLv2FirstnameEn,
    required String? managerLv2LastnameEn,
    required String? managerLv2Email,
    required String? managerLv1PositionName,
    required String? managerLv2PositionName,
    required int? idEmployeeSalary,
    required dynamic idManagerGroupLv1,
    required dynamic idManagerGroupLv2,
    required dynamic managerGroupLv1ManagerGroupName,
    required dynamic managerGroupLv2ManagerGroupName,
    // required String? managerApproveProbationR1FirstnameTh,
    // required String? managerApproveProbationR1LastnameTh,
    // required String? managerApproveProbationR2FirstnameTh,
    // required String? managerApproveProbationR2LastnameTh,
  }):super(
    // idEmployees:idEmployees,
    // employeeId:employeeId,
    // titleTh:titleTh,
    // firstnameTh:firstnameTh,
    // lastnameTh:lastnameTh,
    // nicknameTh:nicknameTh,
    // titleEn:titleEn,
    // firstnameEn:firstnameEn,
    // lastnameEn:lastnameEn,
    // nicknameEn:nicknameEn,
    // gender:gender,
    // personalId:personalId,
    // nationality:nationality,
    // maritalStatus:maritalStatus,
    // passportNumber:passportNumber,
    // workPermitNumber:workPermitNumber,
    // taxId:taxId,
    // ssoId:ssoId,
    // birthday:birthday,
    // address:address,
    // houseNo:houseNo,
    // village:village,
    // villageNo:villageNo,
    // alley:alley,
    // road:road,
    // subDistrict:subDistrict,
    // district:district,
    // provience:provience,
    // areaCode:areaCode,
    // telephoneMobile:telephoneMobile,
    // username:username,
    // email:email,
    // emergencyContact:emergencyContact,
    // emergencyRelationship:emergencyRelationship,
    // emergencyPhone:emergencyPhone,
    // numberOfChildren:numberOfChildren,
    // spouseFirstname:spouseFirstname,
    // spouseLastname:spouseLastname,
    // spouseBirthday:spouseBirthday,
    // spouseTaxId:spouseTaxId,
    // employmentTime:employmentTime,
    // timeScan:timeScan,
    // workingLocation:workingLocation,
    // filedOffice:filedOffice,
    // hiringDate:hiringDate,
    // workingType:workingType,
    // salary:salary,
    // contractType:contractType,
    // retirementDate:retirementDate,
    // contractTermainatoinDate:contractTermainatoinDate,
    // resignDate:resignDate,
    // bookBank:bookBank,
    // bookBankBranchName:bookBankBranchName,
    // bookId:bookId,
    // reportBankBankName:reportBankBankName,
    // reportBankBankId:reportBankBankId,
    // reportBankBookBankId:reportBankBookBankId,
    // reportBankName:reportBankName,
    // reportBankRef:reportBankRef,
    // costCenterCharge:costCenterCharge,
    // costElementCharge:costElementCharge,
    // io:io,
    // idEmploymentType:idEmploymentType,
    // idPaymentType:idPaymentType,
    // idJobLevel:idJobLevel,
    // idPersonnelLevel:idPersonnelLevel,
    // idCompany:idCompany,
    // idBranch:idBranch,
    // idRole:idRole,
    // idManagerLv1:idManagerLv1,
    // idManagerLv2:idManagerLv2,
    // password:password,
    // isActive:isActive,
    // createDate:createDate,
    // createBy:createBy,
    // updateDate:updateDate,
    // updateBy:updateBy,
    // lineUserId:lineUserId,
    // mainWorkingLocationPoint:mainWorkingLocationPoint,
    // methodAttendance:methodAttendance,
    // imageName:imageName,
    // servY:servY,
    // servM:servM,
    // oesyY:oesyY,
    // oesyM:oesyM,
    // userPf:userPf,
    // servPfDate:servPfDate,
    // pfDate:pfDate,
    // criminalImage:criminalImage,
    isFinger:isFinger,
    // isFingerAffectPayroll:isFingerAffectPayroll,
    // probationR1Date:probationR1Date,
    // probationR1Approved:probationR1Approved,
    // probationR1Result:probationR1Result,
    // probationR1ApproveBy:probationR1ApproveBy,
    // probationR1ApproveDate:probationR1ApproveDate,
    // probationR1Remark:probationR1Remark,
    // probationR2Date:probationR2Date,
    // probationR2Approved:probationR2Approved,
    // probationR2Result:probationR2Result,
    // probationR2ApproveBy:probationR2ApproveBy,
    // probationR2ApproveDate:probationR2ApproveDate,
    // probationR2Remark:probationR2Remark,
    // expandTimeProbation:expandTimeProbation,
    // reasonResign:reasonResign,
    // reasonResignOther:reasonResignOther,
    // reasonTerminate:reasonTerminate,
    // reasonTerminateOther:reasonTerminateOther,
    // isBlacklist:isBlacklist,
    // estimatePerformanceResult:estimatePerformanceResult,
    // estimatePerformanceApproved:estimatePerformanceApproved,
    // updateEstimatePerformance:updateEstimatePerformance,
    // isOpenRegisterManpower:isOpenRegisterManpower,
    // overview:overview,
    // isExit:isExit,
    // isPayroll:isPayroll,
    // isTax:isTax,
    // isSelfTaxPaid:isSelfTaxPaid,
    // isSso:isSso,
    // isPf:isPf,
    // incomeUnderSection:incomeUnderSection,
    // uniwelfareFlexcoins:uniwelfareFlexcoins,
    // idPosition:idPosition,
    // positionName:positionName,
    // sectionName:sectionName,
    // departmentName:departmentName,
    // divisionName:divisionName,
    // companyName:companyName,
    // idEmployeeEmploymentType:idEmployeeEmploymentType,
    // employmentTypeName:employmentTypeName,
    // idEmployeePosition:idEmployeePosition,
    // employeePositionStart:employeePositionStart,
    // idEmployeePersonnelLevel:idEmployeePersonnelLevel,
    // employeePersonnelLevelStart:employeePersonnelLevelStart,
    // personnelLevelName:personnelLevelName,
    // personnelLevelGroupName:personnelLevelGroupName,
    // jobLevelName:jobLevelName,
    // jobGroupLevelName:jobGroupLevelName,
    // paymentTypeName:paymentTypeName,
    // paymentRoundName:paymentRoundName,
    // groupGpsLocationsName:groupGpsLocationsName,
    // managerLv1IdManagerLv1:managerLv1IdManagerLv1,
    // managerLv1FirstnameTh:managerLv1FirstnameTh,
    // managerLv1LastnameTh:managerLv1LastnameTh,
    // managerLv1FirstnameEn:managerLv1FirstnameEn,
    // managerLv1LastnameEn:managerLv1LastnameEn,
    // managerLv1Email:managerLv1Email,
    // managerLv2IdManagerLv2:managerLv2IdManagerLv2,
    // managerLv2FirstnameTh:managerLv2FirstnameTh,
    // managerLv2LastnameTh:managerLv2LastnameTh,
    // managerLv2FirstnameEn:managerLv2FirstnameEn,
    // managerLv2LastnameEn:managerLv2LastnameEn,
    // managerLv2Email:managerLv2Email,
    // managerLv1PositionName:managerLv1PositionName,
    // managerLv2PositionName:managerLv2PositionName,
    // idEmployeeSalary:idEmployeeSalary,
    // idManagerGroupLv1:idManagerGroupLv1,
    // idManagerGroupLv2:idManagerGroupLv2,
    // managerGroupLv1ManagerGroupName:managerGroupLv1ManagerGroupName,
    // managerGroupLv2ManagerGroupName:managerGroupLv2ManagerGroupName,
    // managerApproveProbationR1FirstnameTh:managerApproveProbationR1FirstnameTh,
    // managerApproveProbationR1LastnameTh:managerApproveProbationR1LastnameTh,
    // managerApproveProbationR2FirstnameTh:managerApproveProbationR2FirstnameTh,
    // managerApproveProbationR2LastnameTh:managerApproveProbationR2LastnameTh,
  );

  factory EmployeeModel.fromJson(Map<String, dynamic> json) => EmployeeModel(
    idEmployees: json["idEmployees"],
    employeeId: json["employeeID"],
    titleTh: json["title_TH"],
    firstnameTh: json["firstname_TH"],
    lastnameTh: json["lastname_TH"],
    nicknameTh: json["nickname_TH"],
    titleEn: json["title_EN"],
    firstnameEn: json["firstname_EN"],
    lastnameEn: json["lastname_EN"],
    nicknameEn: json["nickname_EN"],
    gender: json["gender"],
    personalId: json["personalID"],
    nationality: json["nationality"],
    maritalStatus: json["maritalStatus"],
    passportNumber: json["passportNumber"],
    workPermitNumber: json["workPermitNumber"],
    taxId: json["taxID"],
    ssoId: json["ssoID"],
    birthday: json["birthday"] == null ? null : DateTime.parse(json["birthday"]),
    address: json["address"],
    houseNo: json["houseNo"],
    village: json["village"],
    villageNo: json["villageNo"],
    alley: json["alley"],
    road: json["road"],
    subDistrict: json["subDistrict"],
    district: json["district"],
    provience: json["provience"],
    areaCode: json["areaCode"],
    telephoneMobile: json["telephoneMobile"],
    username: json["username"],
    email: json["email"],
    emergencyContact: json["emergencyContact"],
    emergencyRelationship: json["emergencyRelationship"],
    emergencyPhone: json["emergencyPhone"],
    numberOfChildren: json["numberOfChildren"],
    spouseFirstname: json["spouseFirstname"],
    spouseLastname: json["spouseLastname"],
    spouseBirthday: json["spouseBirthday"],
    spouseTaxId: json["spouseTaxID"],
    employmentTime: json["employmentTime"],
    timeScan: json["timeScan"],
    workingLocation: json["workingLocation"],
    filedOffice: json["filed_office"],
    hiringDate: json["hiringDate"] == null ? null : DateTime.parse(json["hiringDate"]),
    workingType: json["workingType"],
    salary: json["salary"],
    contractType: json["contractType"],
    retirementDate: json["retirementDate"],
    contractTermainatoinDate: json["contractTermainatoinDate"],
    resignDate: json["resignDate"],
    bookBank: json["bookBank"],
    bookBankBranchName: json["bookBankBranchName"],
    bookId: json["bookID"],
    reportBankBankName: json["reportBankBankName"],
    reportBankBankId: json["reportBankBankID"],
    reportBankBookBankId: json["reportBankBookBankID"],
    reportBankName: json["reportBankName"],
    reportBankRef: json["reportBankRef"],
    costCenterCharge: json["costCenterCharge"],
    costElementCharge: json["costElementCharge"],
    io: json["io"],
    idEmploymentType: json["idEmploymentType"],
    idPaymentType: json["idPaymentType"],
    idJobLevel: json["idJobLevel"],
    idPersonnelLevel: json["idPersonnelLevel"],
    idCompany: json["idCompany"],
    idBranch: json["idBranch"],
    idRole: json["idRole"],
    idManagerLv1: json["idManagerLV1"],
    idManagerLv2: json["idManagerLV2"],
    password: json["password"],
    isActive: json["isActive"],
    createDate: json["createDate"],
    createBy: json["createBy"],
    updateDate: json["updateDate"] == null ? null : DateTime.parse(json["updateDate"]),
    updateBy: json["updateBy"],
    lineUserId: json["lineUserId"],
    mainWorkingLocationPoint: json["mainWorkingLocationPoint"],
    methodAttendance: json["methodAttendance"],
    imageName: json["imageName"],
    servY: json["Serv_Y"],
    servM: json["Serv_M"],
    oesyY: json["OESY_Y"],
    oesyM: json["OESY_M"],
    userPf: json["userPF"],
    servPfDate: json["ServPFDate"] == null ? null : DateTime.parse(json["ServPFDate"]),
    pfDate: json["PFDate"] == null ? null : DateTime.parse(json["PFDate"]),
    criminalImage: json["criminalImage"],
    isFinger: json["isFinger"],
    isFingerAffectPayroll: json["isFingerAffectPayroll"],
    // probationR1Date: json["probationR1Date"],
    // probationR1Approved: json["probationR1Approved"],
    // probationR1Result: json["probationR1Result"],
    // probationR1ApproveBy: json["probationR1ApproveBy"],
    // probationR1ApproveDate: json["probationR1ApproveDate"] == null ? null : DateTime.parse(json["probationR1ApproveDate"]),
    // probationR1Remark: json["probationR1Remark"],
    // probationR2Date: json["probationR2Date"],
    // probationR2Approved: json["probationR2Approved"],
    // probationR2Result: json["probationR2Result"],
    // probationR2ApproveBy: json["probationR2ApproveBy"],
    // probationR2ApproveDate: json["probationR2ApproveDate"] == null ? null : DateTime.parse(json["probationR2ApproveDate"]),
    // probationR2Remark: json["probationR2Remark"],
    // expandTimeProbation: json["expandTimeProbation"],
    // probationR1Date: json["probationR1Date"],
    // probationR1Approved: json["probationR1Approved"],
    // probationR1Result: json["probationR1Result"],
    // probationR1ApproveBy: json["probationR1ApproveBy"],
    // probationR1ApproveDate: json["probationR1ApproveDate"] == null ? null : DateTime.parse(json["probationR1ApproveDate"]),
    // probationR1Remark: json["probationR1Remark"],
    // probationR2Date: json["probationR2Date"],
    // probationR2Approved: json["probationR2Approved"],
    // probationR2Result: json["probationR2Result"],
    // probationR2ApproveBy: json["probationR2ApproveBy"],
    // probationR2ApproveDate: json["probationR2ApproveDate"] == null ? null : DateTime.parse(json["probationR2ApproveDate"]),
    // probationR2Remark: json["probationR2Remark"],
    // expandTimeProbation: json["expandTimeProbation"],
    reasonResign: json["reasonResign"],
    reasonResignOther: json["reasonResignOther"],
    reasonTerminate: json["reasonTerminate"],
    reasonTerminateOther: json["reasonTerminateOther"],
    isBlacklist: json["isBlacklist"],
    estimatePerformanceResult: json["estimatePerformanceResult"],
    estimatePerformanceApproved: json["estimatePerformanceApproved"],
    updateEstimatePerformance: json["updateEstimatePerformance"] == null ? null : DateTime.parse(json["updateEstimatePerformance"]),
    isOpenRegisterManpower: json["isOpenRegisterManpower"],
    overview: json["overview"],
    isExit: json["isExit"],
    isPayroll: json["isPayroll"],
    isTax: json["isTax"],
    isSelfTaxPaid: json["isSelfTaxPaid"],
    isSso: json["isSso"],
    isPf: json["isPf"],
    incomeUnderSection: json["incomeUnderSection"],
    uniwelfareFlexcoins: json["uniwelfare_flexcoins"],
    idPosition: json["idPosition"],
    positionName: json["positionName"],
    sectionName: json["sectionName"],
    departmentName: json["departmentName"],
    divisionName: json["divisionName"],
    companyName: json["companyName"],
    idEmployeeEmploymentType: json["idEmployeeEmploymentType"],
    employmentTypeName: json["employmentTypeName"],
    idEmployeePosition: json["idEmployeePosition"],
    employeePositionStart: json["employeePositionStart"] == null ? null : DateTime.parse(json["employeePositionStart"]),
    idEmployeePersonnelLevel: json["idEmployeePersonnelLevel"],
    employeePersonnelLevelStart: json["employeePersonnelLevelStart"] == null ? null : DateTime.parse(json["employeePersonnelLevelStart"]),
    personnelLevelName: json["personnelLevelName"],
    personnelLevelGroupName: json["personnelLevelGroupName"],
    jobLevelName: json["jobLevelName"],
    jobGroupLevelName: json["jobGroupLevelName"],
    paymentTypeName: json["paymentTypeName"],
    paymentRoundName: json["paymentRoundName"],
    groupGpsLocationsName: json["groupGpsLocationsName"],
    managerLv1IdManagerLv1: json["managerLV1_idManagerLV1"],
    managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
    managerLv1LastnameTh: json["managerLV1_lastname_TH"],
    managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
    managerLv1LastnameEn: json["managerLV1_lastname_EN"],
    managerLv1Email: json["managerLV1_email"],
    managerLv2IdManagerLv2: json["managerLV2_idManagerLV2"],
    managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
    managerLv2LastnameTh: json["managerLV2_lastname_TH"],
    managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
    managerLv2LastnameEn: json["managerLV2_lastname_EN"],
    managerLv2Email: json["managerLV2_email"],
    managerLv1PositionName: json["managerLV1_positionName"],
    managerLv2PositionName: json["managerLV2_positionName"],
    idEmployeeSalary: json["idEmployeeSalary"],
    idManagerGroupLv1: json["idManagerGroupLV1"],
    idManagerGroupLv2: json["idManagerGroupLV2"],
    managerGroupLv1ManagerGroupName: json["managerGroupLV1_managerGroupName"],
    managerGroupLv2ManagerGroupName: json["managerGroupLV2_managerGroupName"],
    // managerApproveProbationR1FirstnameTh: json["managerApproveProbationR1_firstname_TH"],
    // managerApproveProbationR1LastnameTh: json["managerApproveProbationR1_lastname_TH"],
    // managerApproveProbationR2FirstnameTh: json["managerApproveProbationR2_firstname_TH"],
    // managerApproveProbationR2LastnameTh: json["managerApproveProbationR2_lastname_TH"],
  );

  // Map<String, dynamic> toJson() => {
  //   "idEmployees": idEmployees,
  //   "employeeID": employeeId,
  //   "title_TH": titleTh,
  //   "firstname_TH": firstnameTh,
  //   "lastname_TH": lastnameTh,
  //   "nickname_TH": nicknameTh,
  //   "title_EN": titleEn,
  //   "firstname_EN": firstnameEn,
  //   "lastname_EN": lastnameEn,
  //   "nickname_EN": nicknameEn,
  //   "gender": gender,
  //   "personalID": personalId,
  //   "nationality": nationality,
  //   "maritalStatus": maritalStatus,
  //   "passportNumber": passportNumber,
  //   "workPermitNumber": workPermitNumber,
  //   "taxID": taxId,
  //   "ssoID": ssoId,
  //   "birthday": birthday?.toIso8601String(),
  //   "address": address,
  //   "houseNo": houseNo,
  //   "village": village,
  //   "villageNo": villageNo,
  //   "alley": alley,
  //   "road": road,
  //   "subDistrict": subDistrict,
  //   "district": district,
  //   "provience": provience,
  //   "areaCode": areaCode,
  //   "telephoneMobile": telephoneMobile,
  //   "email": email,
  //   "emergencyContact": emergencyContact,
  //   "emergencyRelationship": emergencyRelationship,
  //   "emergencyPhone": emergencyPhone,
  //   "numberOfChildren": numberOfChildren,
  //   "spouseFirstname": spouseFirstname,
  //   "spouseLastname": spouseLastname,
  //   "spouseBirthday": spouseBirthday,
  //   "spouseTaxID": spouseTaxId,
  //   "employmentTime": employmentTime,
  //   "timeScan": timeScan,
  //   "workingLocation": workingLocation,
  //   "filed_office": filedOffice,
  //   "hiringDate": hiringDate?.toIso8601String(),
  //   "workingType": workingType,
  //   "salary": salary,
  //   "contractType": contractType,
  //   "retirementDate": retirementDate?.toIso8601String(),
  //   "contractTermainatoinDate": contractTermainatoinDate,
  //   "resignDate": resignDate,
  //   "bookBank": bookBank,
  //   "bookBankBranchName": bookBankBranchName,
  //   "bookID": bookId,
  //   "reportBankBankName": reportBankBankName,
  //   "reportBankBankID": reportBankBankId,
  //   "reportBankBookBankID": reportBankBookBankId,
  //   "reportBankName": reportBankName,
  //   "reportBankRef": reportBankRef,
  //   "costCenterCharge": costCenterCharge,
  //   "costElementCharge": costElementCharge,
  //   "io": io,
  //   "idEmploymentType": idEmploymentType,
  //   "idPaymentType": idPaymentType,
  //   "idJobLevel": idJobLevel,
  //   "idPersonnelLevel": idPersonnelLevel,
  //   "idCompany": idCompany,
  //   "idBranch": idBranch,
  //   "idRole": idRole,
  //   "idManagerLV1": idManagerLv1,
  //   "idManagerLV2": idManagerLv2,
  //   "password": password,
  //   "isActive": isActive,
  //   "createDate": createDate?.toIso8601String(),
  //   "createBy": createBy,
  //   "updateDate": updateDate?.toIso8601String(),
  //   "updateBy": updateBy,
  //   "lineUserId": lineUserId,
  //   "mainWorkingLocationPoint": mainWorkingLocationPoint,
  //   "methodAttendance": methodAttendance,
  //   "imageName": imageName,
  //   "Serv_Y": servY,
  //   "Serv_M": servM,
  //   "OESY_Y": oesyY,
  //   "OESY_M": oesyM,
  //   "userPF": userPf,
  //   "ServPFDate": servPfDate,
  //   "PFDate": pfDate,
  //   "criminalImage": criminalImage,
  //   "isFinger": isFinger,
  //   "probationR1Date": probationR1Date,
  //   "probationR1Approved": probationR1Approved,
  //   "probationR1Result": probationR1Result,
  //   "probationR2Date": probationR2Date,
  //   "probationR2Approved": probationR2Approved,
  //   "probationR2Result": probationR2Result,
  //   "expandTimeProbation": expandTimeProbation,
  //   "reasonResign": reasonResign,
  //   "reasonTerminate": reasonTerminate,
  //   "reasonTerminateOther": reasonTerminateOther,
  //   "positionName": positionName,
  //   "sectionName": sectionName,
  //   "departmentName": departmentName,
  //   "divisionName": divisionName,
  //   "companyName": companyName,
  //   "employmentTypeName": employmentTypeName,
  //   "idEmployeePosition": idEmployeePosition,
  //   "jobLevelName": jobLevelName,
  //   "personnelLevelName": personnelLevelName,
  //   "jobGroupName": jobGroupName,
  //   "paymentTypeName": paymentTypeName,
  //   "paymentRoundName": paymentRoundName,
  //   "groupGpsLocationsName": groupGpsLocationsName,
  //   "managerLV1_idManagerLV1": managerLv1IdManagerLv1,
  //   "managerLV1_firstname_TH": managerLv1FirstnameTh,
  //   "managerLV1_lastname_TH": managerLv1LastnameTh,
  //   "managerLV1_firstname_EN": managerLv1FirstnameEn,
  //   "managerLV1_lastname_EN": managerLv1LastnameEn,
  //   "managerLV1_email": managerLv1Email,
  //   "managerLV2_idManagerLV2": managerLv2IdManagerLv2,
  //   "managerLV2_firstname_TH": managerLv2FirstnameTh,
  //   "managerLV2_lastname_TH": managerLv2LastnameTh,
  //   "managerLV2_firstname_EN": managerLv2FirstnameEn,
  //   "managerLV2_lastname_EN": managerLv2LastnameEn,
  //   "managerLV2_email": managerLv2Email,
  //   "managerLV1_positionName": managerLv1PositionName,
  //   "managerLV2_positionName": managerLv2PositionName,
  // };
}

class OtModel extends OtEntity{

  const OtModel({
    // required super.idRequestTime,
    required super.start,
    required super.end,
    // required super.workDate,
    // required super.idRequestReason,
    // required super.idRequestType,
    required super.otherReason,
    // required super.idEmployees,
    required super.isManagerLv1Approve,
    required super.isManagerLv2Approve,
    required super.amountHours,
    required super.xOt,
    required super.xOtHoliday,
    required super.xWorkingDailyHoliday,
    required super.xWorkingMonthlyHoliday,
    // required super.isActive,
    required super.managerLv1ApproveBy,
    required super.managerLv1ApproveDate,
    required super.managerLv2ApproveBy,
    required super.managerLv2ApproveDate,
    // required super.requestTimecol,
    required super.createDate,
    required super.isDoubleApproval,
    required super.approvalLevel,
    // required super.fillInCreate,
    // required super.fillInApproveLv1,
    // required super.fillInApproveLv2,
    required super.isWithdraw,
    // required super.payShift,
    required super.commentManagerLv1,
    required super.commentManagerLv2,
    required super.idManagerGroupLv1,
    required super.idManagerGroupLv2,
    required super.name,
    required super.reasonName,
    required super.managerLv1FirstnameTh,
    required super.managerLv1LastnameTh,
    required super.managerLv1FirstnameEn,
    required super.managerLv1LastnameEn,
    required super.managerLv1Email,
    required super.managerLv2FirstnameTh,
    required super.managerLv2LastnameTh,
    required super.managerLv2FirstnameEn,
    required super.managerLv2LastnameEn,
    required super.managerLv2Email,
    required super.createDateText,
    required super.startText,
    required super.endText,
  });

  factory OtModel.fromJson(Map<String, dynamic> json) => OtModel(
    // idRequestTime: json["idRequestTime"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    // workDate: json["workDate"] == null ? null : DateTime.parse(json["workDate"]),
    // idRequestReason: json["idRequestReason"],
    // idRequestType: json["idRequestType"],
    otherReason: json["otherReason"],
    // idEmployees: json["idEmployees"],
    isManagerLv1Approve: json["isManagerLV1Approve"],
    isManagerLv2Approve: json["isManagerLV2Approve"],
    amountHours: json["amountHours"],
    xOt: json["xOT"],
    xOtHoliday: json["xOTHoliday"],
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"],
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"],
    // isActive: json["isActive"],
    managerLv1ApproveBy: json["managerLV1ApproveBy"],
    managerLv1ApproveDate: json["managerLV1ApproveDate"],
    managerLv2ApproveBy: json["managerLV2ApproveBy"],
    managerLv2ApproveDate: json["managerLV2ApproveDate"],
    // requestTimecol: json["RequestTimecol"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    isDoubleApproval: json["isDoubleApproval"],
    approvalLevel: json["approvalLevel"],
    // fillInCreate: json["fillInCreate"],
    // fillInApproveLv1: json["fillInApproveLV1"],
    // fillInApproveLv2: json["fillInApproveLV2"],
    isWithdraw: json["isWithdraw"],
    // payShift: json["payShift"],
    commentManagerLv1: json["commentManagerLV1"],
    commentManagerLv2: json["commentManagerLV2"],
    idManagerGroupLv1: json["idManagerGroupLV1"],
    idManagerGroupLv2: json["idManagerGroupLV2"],
    name: json["name"],
    reasonName: json["reasonName"],
    managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
    managerLv1LastnameTh: json["managerLV1_lastname_TH"],
    managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
    managerLv1LastnameEn: json["managerLV1_lastname_EN"],
    managerLv1Email: json["managerLV1_email"],
    managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
    managerLv2LastnameTh: json["managerLV2_lastname_TH"],
    managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
    managerLv2LastnameEn: json["managerLV2_lastname_EN"],
    managerLv2Email: json["managerLV2_email"],
    createDateText: json["createDateText"],
    startText: json["startText"],
    endText: json["endText"],
  );
}

class PatternModel extends PatternEntity {
  const PatternModel({
    // required super.idShiftPattern,
    // required super.indexScheduleId,
    // required super.idShift,
    // required super.shiftName,
    // required super.idShiftType,
    required super.shiftTypeName,
    required super.timeIn,
    required super.timeOut,
    // required super.breakTime,
    required super.isWorkingDay,
    // required super.lateIn,
    required super.workingHours,
    required super.period,
    // required super.idShiftGroup,
    // required super.shiftGroupName,
    // required super.shiftStartInMonday,
    // required super.shiftStartDate,
    // required super.shiftNumber,
    required super.workDay,
    required super.isTimeFrame,
    required super.idWorkingType,
    required super.workingTypeName,
  });

  factory PatternModel.fromJson(Map<String, dynamic> json) => PatternModel(
    // idShiftPattern: json["idShiftPattern"],
    // indexScheduleId: json["indexScheduleId"],
    // idShift: json["idShift"],
    // shiftName: json["shiftName"],
    // idShiftType: json["idShiftType"],
    shiftTypeName: json["shiftTypeName"],
    timeIn: json["timeIn"],
    timeOut: json["timeOut"],
    // breakTime: json["breakTime"],
    isWorkingDay: json["isWorkingDay"],
    // lateIn: json["lateIn"],
    workingHours: json["workingHours"],
    period: json["period"],
    // idShiftGroup: json["idShiftGroup"],
    // shiftGroupName: json["shiftGroupName"],
    // shiftStartInMonday: json["shiftStartInMonday"],
    // shiftStartDate: json["shiftStartDate"] == null ? null : DateTime.parse(json["shiftStartDate"]),
    // shiftNumber: json["shiftNumber"],
    workDay: json["workDay"],
    isTimeFrame: json["isTimeFrame"],
    idWorkingType: json["idWorkingType"],
    workingTypeName: json["workingTypeName"],
  );

}

class HolidayModel extends HolidayEntity {

  const HolidayModel(
    // required super.idHoliday,
    // required super.name,
    // required super.dateHoliday,
    // required super.compensateName,
    // required super.compensateDate,
    // required super.idCompany,
    // required super.holidayYear,
    // required super.showTimeline,
    // required super.isActive,
  );

  factory HolidayModel.fromJson(Map<String, dynamic> json) => HolidayModel(
    // idHoliday: json["idHoliday"],
    // name: json["name"],
    // dateHoliday: json["dateHoliday"] == null ? null : DateTime.parse(json["dateHoliday"]),
    // compensateName: json["compensateName"],
    // compensateDate: json["compensateDate"],
    // idCompany: json["idCompany"],
    // holidayYear: json["holidayYear"],
    // showTimeline: json["showTimeline"],
    // isActive: json["isActive"],
  );
  // Map<String, dynamic> toJson() => {
  //   "idHoliday": idHoliday,
  //   "name": name,
  //   "dateHoliday": dateHoliday?.toIso8601String(),
  //   "compensateName": compensateName,
  //   "compensateDate": compensateDate,
  //   "idCompany": idCompany,
  //   "holidayYear": holidayYear,
  //   "showTimeline": showTimeline,
  //   "isactive": isactive,
  // };
}


class LeaveModel extends LeaveEntity{

  const LeaveModel({
    // required super.idLeave,
    // required super.idLeaveType,
    required super.description,
    // required super.filename,
    required super.start,
    required super.end,
    // required super.idEmployees,
    // required super.used,
    // required super.quota,
    // required super.balance,
    // required super.remaining,
    // required super.carry,
    // required super.idManager,
    // required super.approveDate,
    required super.isApprove,
    // required super.sFullDay,
    // required super.workingStart,
    // required super.workingEnd,
    required super.isActive,
    // required super.fillInApprove,
    // required super.createDate,
    // required super.isWithdraw,
    // required super.commentManager,
    // required super.idHoliday,
    required super.name,
    // required super.startText,
    // required super.endText,
    // required super.ccEmail,
    // required super.idManagerGroup,
    required super.nameEN,
  });

  factory LeaveModel.fromJson(Map<String, dynamic> json) => LeaveModel(
    // idLeave: json["idLeave"],
    // idLeaveType: json["idLeaveType"],
    description: json["description"],
    // filename: json["filename"],
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    // idEmployees: json["idEmployees"],
    // used: json["used"]?.toDouble(),
    // quota: json["quota"]?.toDouble(),
    // balance: json["balance"]?.toDouble(),
    // remaining: json["remaining"]?.toDouble(),
    // carry: json["carry"],
    // idManager: json["idManager"],
    // approveDate: json["approveDate"] == null
    //     ? null
    //     : DateTime.parse(json["approveDate"]),
    isApprove: json["isApprove"],
    // isFullDay: json["isFullDay"],
    // workingStart: json["workingStart"],
    // workingEnd: json["workingEnd"],
    isActive: json["isActive"],
    // fillInApprove: json["fillInApprove"],
    // createDate: json["createDate"] == null
    //     ? null
    //     : DateTime.parse(json["createDate"]),
    // isWithdraw: json["isWithdraw"],
    // commentManager: json["commentManager"],
    // idHoliday: json["idHoliday"],
    name: json["name"],
    // startText: json["startText"],
    // endText: json["endText"],
    // ccEmail: json["cc_email"],
    // idManagerGroup: json["idManagerGroup"],
    nameEN: json["name_EN"],
  );

  // Map<String, dynamic> toJson() => {
  //   "idLeave": idLeave,
  //   "idLeaveType": idLeaveType,
  //   "description": description,
  //   "filename": filename,
  //   "start": start?.toIso8601String(),
  //   "end": end?.toIso8601String(),
  //   "idEmployees": idEmployees,
  //   "used": used,
  //   "quota": quota,
  //   "balance": balance,
  //   "remaining": remaining,
  //   "carry": carry,
  //   "idManager": idManager,
  //   "approveDate": approveDate?.toIso8601String(),
  //   "isApprove": isApprove,
  //   "isFullDay": isFullDay,
  //   "workingStart": workingStart,
  //   "workingEnd": workingEnd,
  //   "isActive": isActive,
  //   "fillInApprove": fillInApprove,
  //   "createDate": createDate?.toIso8601String(),
  //   "isWithdraw": isWithdraw,
  //   "commentManager": commentManager,
  //   "idHoliday": idHoliday,
  //   "name": name,
  //   "startText": startText,
  //   "endText": endText,
  // };
}
