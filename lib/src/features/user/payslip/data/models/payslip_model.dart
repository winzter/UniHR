import 'dart:convert';
import '../../domain/entities/payslip.dart';

List<PayslipModel> payslipFromJson(String str) => List<PayslipModel>.from(json.decode(str).map((x) => PayslipModel.fromJson(x)));
String payslipToJson(PayslipModel data) => json.encode(data.toJson());

class PayslipModel extends PayslipEntity {
  const PayslipModel({
    required super.employeeId,
    required super.titleTh,
    required super.firstnameTh,
    required super.lastnameTh,
    required super.bookId,
    required super.idPosition,
    required super.positionName,
    required super.idDepartment,
    required super.departmentName,
    required super.idPayrunDetail,
    required super.idPayrun,
    required super.idEmployees,
    required super.workingDay,
    required super.absence,
    required super.additionsTaxable,
    required super.additionsNonTaxable,
    required super.totalOt,
    required super.totalEarnings,
    required super.deductionTaxable,
    required super.deductionNonTaxable,
    required super.totalDeductions,
    required super.net,
    required super.otOneHours,
    required super.otOneFiveHours,
    required super.otTwoHours,
    required super.otThreeHours,
    required super.paymentType,
    required super.monthPeriod,
    required super.payDate,
    required super.isCheck,
    required super.idCompany,
    required super.totalShiftPay,
    required super.accumulateEarnings,
    required super.accumulateTax,
    required super.accumulateSso,
    required super.accumulatePf,
    required super.start,
    required super.end,
    required super.companyName,
    required super.addition,
    required super.deduction,
  });

  factory PayslipModel.fromJson(Map<String, dynamic> json) => PayslipModel(
    employeeId: json["employeeID"],
    titleTh: json["title_TH"],
    firstnameTh: json["firstname_TH"],
    lastnameTh: json["lastname_TH"],
    bookId: json["bookID"],
    idPosition: json["idPosition"],
    positionName: json["positionName"],
    idDepartment: json["idDepartment"],
    departmentName: json["departmentName"],
    idPayrunDetail: json["idPayrunDetail"],
    idPayrun: json["idPayrun"],
    idEmployees: json["idEmployees"],
    workingDay: json["workingDay"],
    absence: json["absence"],
    additionsTaxable: json["additionsTaxable"]?.toDouble(),
    additionsNonTaxable: json["additionsNonTaxable"]?.toDouble(),
    totalOt: json["totalOT"]?.toDouble(),
    totalEarnings: json["totalEarnings"]?.toDouble(),
    deductionTaxable: json["deductionTaxable"]?.toDouble(),
    deductionNonTaxable: json["deductionNonTaxable"]?.toDouble(),
    totalDeductions: json["totalDeductions"]?.toDouble(),
    net: json["net"]?.toDouble(),
    otOneHours: json["otOneHours"]?.toDouble(),
    otOneFiveHours: json["otOneFiveHours"]?.toDouble(),
    otTwoHours: json["otTwoHours"]?.toDouble(),
    otThreeHours: json["otThreeHours"]?.toDouble(),
    paymentType: json["paymentType"],
    monthPeriod: json["monthPeriod"] == null ? null : DateTime.parse(json["monthPeriod"]),
    payDate: json["payDate"],
    isCheck: json["isCheck"],
    idCompany: json["idCompany"],
    totalShiftPay: json["totalShiftPay"]?.toDouble(),
    accumulateEarnings: json["accumulateEarnings"]?.toDouble(),
    accumulateTax: json["accumulateTax"]?.toDouble(),
    accumulateSso: json["accumulateSSO"]?.toDouble(),
    accumulatePf: json["accumulatePF"]?.toDouble(),
    start: json["start"] == null ? null : DateTime.parse(json["start"]),
    end: json["end"] == null ? null : DateTime.parse(json["end"]),
    companyName: json["companyName"],
    addition: json["addition"] == null ? [] : List<TionModel>.from(json["addition"]!.map((x) => TionModel.fromJson(x))),
    deduction: json["deduction"] == null ? [] : List<TionModel>.from(json["deduction"]!.map((x) => TionModel.fromJson(x))),
      );

  Map<String, dynamic> toJson() => {
    "employeeID": employeeId,
    "title_TH": titleTh,
    "firstname_TH": firstnameTh,
    "lastname_TH": lastnameTh,
    "bookID": bookId,
    "idPosition": idPosition,
    "positionName": positionName,
    "idDepartment": idDepartment,
    "departmentName": departmentName,
    "idPayrunDetail": idPayrunDetail,
    "idPayrun": idPayrun,
    "idEmployees": idEmployees,
    "workingDay": workingDay,
    "absence": absence,
    "additionsTaxable": additionsTaxable,
    "additionsNonTaxable": additionsNonTaxable,
    "totalOT": totalOt,
    "totalEarnings": totalEarnings,
    "deductionTaxable": deductionTaxable,
    "deductionNonTaxable": deductionNonTaxable,
    "totalDeductions": totalDeductions,
    "net": net,
    "otOneHours": otOneHours,
    "otOneFiveHours": otOneFiveHours,
    "otTwoHours": otTwoHours,
    "otThreeHours": otThreeHours,
    "paymentType": paymentType,
    "monthPeriod": monthPeriod?.toIso8601String(),
    "payDate": payDate,
    "isCheck": isCheck,
    "idCompany": idCompany,
    "totalShiftPay": totalShiftPay,
    "accumulateEarnings": accumulateEarnings,
    "accumulateTax": accumulateTax,
    "accumulateSSO": accumulateSso,
    "accumulatePF": accumulatePf,
    "start": start?.toIso8601String(),
    "end": end?.toIso8601String(),
    "companyName": companyName,
    // "addition": addition == null ? [] : List<TionModel>.from(addition!.map((x) => x.toJson())),
    // "deduction": deduction == null ? [] : List<TionModel>.from(deduction!.map((x) => x.toJson())),
      };
}

class TionModel extends TionEntity {
  const TionModel({
    required int? idPayrunDetailMain,
    required int? idEmployees,
    required int? idPayrunDetail,
    required int? idPayrollType,
    required double? value,
    required DateTime? payround,
    required dynamic valueHour,
    required dynamic valueActual,
    required int? idPayrun,
    required String? name,
    required int? isAddition,
    required String? payroundText,
    required int? idPayrunDetailAddition,
    required int? idAddition,
  }) : super(
    idPayrunDetailMain : idPayrunDetailMain,
    idEmployees : idEmployees,
    idPayrunDetail : idPayrunDetail,
    idPayrollType : idPayrollType,
    value : value,
    payround : payround,
    valueHour : valueHour,
    valueActual : valueActual,
    idPayrun : idPayrun,
    name : name,
    isAddition : isAddition,
    payroundText : payroundText,
    idPayrunDetailAddition : idPayrunDetailAddition,
    idAddition : idAddition,
        );

  factory TionModel.fromJson(Map<String, dynamic> json) => TionModel(
    idPayrunDetailMain: json["idPayrunDetailMain"],
    idEmployees: json["idEmployees"],
    idPayrunDetail: json["idPayrunDetail"],
    idPayrollType: json["idPayrollType"],
    value: json["value"]?.toDouble(),
    payround: json["payround"] == null ? null : DateTime.parse(json["payround"]),
    valueHour: json["valueHour"],
    valueActual: json["valueActual"],
    idPayrun: json["idPayrun"],
    name: json["name"],
    isAddition: json["isAddition"],
    payroundText: json["payroundText"],
    idPayrunDetailAddition: json["idPayrunDetailAddition"],
    idAddition: json["idAddition"],
  );

  Map<String, dynamic> toJson() => {
    "idPayrunDetailMain": idPayrunDetailMain,
    "idEmployees": idEmployees,
    "idPayrunDetail": idPayrunDetail,
    "idPayrollType": idPayrollType,
    "value": value,
    "payround": payround?.toIso8601String(),
    "valueHour": valueHour,
    "valueActual": valueActual,
    "idPayrun": idPayrun,
    "name": name,
    "isAddition": isAddition,
    "payroundText": payroundText,
    "idPayrunDetailAddition": idPayrunDetailAddition,
    "idAddition": idAddition,
  };
}
