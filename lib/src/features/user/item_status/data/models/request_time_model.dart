import 'dart:convert';
import '../../domain/entities/entities.dart';

List<RequestTimeModel> requestTimeModelFromJson(String str) =>
    List<RequestTimeModel>.from(
        json.decode(str).map((x) => RequestTimeModel.fromJson(x)));
String requestTimeModelToJson(List<RequestTimeModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class RequestTimeModel extends RequestTimeEntity {
  const RequestTimeModel({
    required int? idRequestTime,
    required DateTime? start,
    required DateTime? end,
    required DateTime? workDate,
    required int? idRequestReason,
    required int? idRequestType,
    required String? otherReason,
    required int? idEmployees,
    required dynamic isManagerLv1Approve,
    required dynamic isManagerLv2Approve,
    required double? amountHours,
    required double? xOt,
    required double? xOtHoliday,
    required double? xWorkingDailyHoliday,
    required double? xWorkingMonthlyHoliday,
    required int? isActive,
    required int? managerLv1ApproveBy,
    required dynamic managerLv1ApproveDate,
    required dynamic managerLv2ApproveBy,
    required dynamic managerLv2ApproveDate,
    required dynamic requestTimecol,
    required DateTime? createDate,
    required int? isDoubleApproval,
    required int? approvalLevel,
    required dynamic fillInCreate,
    required dynamic fillInApproveLv1,
    required dynamic fillInApproveLv2,
    required dynamic isWithdraw,
    required dynamic payShift,
    required dynamic commentManagerLv1,
    required dynamic commentManagerLv2,
    required String? name,
    required String? reasonName,
    required String? reasonName_EN,
    required String? managerLv1FirstnameTh,
    required String? managerLv1LastnameTh,
    required String? managerLv1FirstnameEn,
    required String? managerLv1LastnameEn,
    required String? managerLv1Email,
    required dynamic managerLv2FirstnameTh,
    required dynamic managerLv2LastnameTh,
    required dynamic managerLv2FirstnameEn,
    required dynamic managerLv2LastnameEn,
    required dynamic managerLv2Email,
    required String? startText,
    required String? endText,
    required String? createDateText,
    required String? workDateText,
    required dynamic managerLv1ApproveDateText,
    required dynamic managerLv2ApproveDateText,
  }) : super(
          idRequestTime: idRequestTime,
          start: start,
          end: end,
          workDate: workDate,
          idRequestReason: idRequestReason,
          idRequestType: idRequestType,
          otherReason: otherReason,
          idEmployees: idEmployees,
          isManagerLv1Approve: isManagerLv1Approve,
          isManagerLv2Approve: isManagerLv2Approve,
          amountHours: amountHours,
          xOt: xOt,
          xOtHoliday: xOtHoliday,
          xWorkingDailyHoliday: xWorkingDailyHoliday,
          xWorkingMonthlyHoliday: xWorkingMonthlyHoliday,
          isActive: isActive,
          managerLv1ApproveBy: managerLv1ApproveBy,
          managerLv1ApproveDate: managerLv1ApproveDate,
          managerLv2ApproveBy: managerLv2ApproveBy,
          managerLv2ApproveDate: managerLv2ApproveDate,
          requestTimecol: requestTimecol,
          createDate: createDate,
          isDoubleApproval: isDoubleApproval,
          approvalLevel: approvalLevel,
          fillInCreate: fillInCreate,
          fillInApproveLv1: fillInApproveLv1,
          fillInApproveLv2: fillInApproveLv2,
          isWithdraw: isWithdraw,
          payShift: payShift,
          commentManagerLv1: commentManagerLv1,
          commentManagerLv2: commentManagerLv2,
          name: name,
          reasonName_EN: reasonName_EN,
          reasonName: reasonName,
          managerLv1FirstnameTh: managerLv1FirstnameTh,
          managerLv1LastnameTh: managerLv1LastnameTh,
          managerLv1FirstnameEn: managerLv1FirstnameEn,
          managerLv1LastnameEn: managerLv1LastnameEn,
          managerLv1Email: managerLv1Email,
          managerLv2FirstnameTh: managerLv2FirstnameTh,
          managerLv2LastnameTh: managerLv2LastnameTh,
          managerLv2FirstnameEn: managerLv2FirstnameEn,
          managerLv2LastnameEn: managerLv2LastnameEn,
          managerLv2Email: managerLv2Email,
          startText: startText,
          endText: endText,
          createDateText: createDateText,
          workDateText: workDateText,
          managerLv1ApproveDateText: managerLv1ApproveDateText,
          managerLv2ApproveDateText: managerLv2ApproveDateText,
        );

  factory RequestTimeModel.fromJson(Map<String, dynamic> json) =>
      RequestTimeModel(
        idRequestTime: json["idRequestTime"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        workDate:
            json["workDate"] == null ? null : DateTime.parse(json["workDate"]),
        idRequestReason: json["idRequestReason"],
        idRequestType: json["idRequestType"],
        otherReason: json["otherReason"],
        idEmployees: json["idEmployees"],
        isManagerLv1Approve: json["isManagerLV1Approve"],
        isManagerLv2Approve: json["isManagerLV2Approve"],
        amountHours: json["amountHours"]?.toDouble(),
        xOt: json["xOT"]?.toDouble(),
        xOtHoliday: json["xOTHoliday"]?.toDouble(),
        xWorkingDailyHoliday: json["xWorkingDailyHoliday"]?.toDouble(),
        xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"]?.toDouble(),
        isActive: json["isActive"],
        managerLv1ApproveBy: json["managerLV1ApproveBy"],
        managerLv1ApproveDate: json["managerLV1ApproveDate"],
        managerLv2ApproveBy: json["managerLV2ApproveBy"],
        managerLv2ApproveDate: json["managerLV2ApproveDate"],
        requestTimecol: json["RequestTimecol"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isDoubleApproval: json["isDoubleApproval"],
        approvalLevel: json["approvalLevel"],
        fillInCreate: json["fillInCreate"],
        fillInApproveLv1: json["fillInApproveLV1"],
        fillInApproveLv2: json["fillInApproveLV2"],
        isWithdraw: json["isWithdraw"],
        payShift: json["payShift"],
        commentManagerLv1: json["commentManagerLV1"],
        commentManagerLv2: json["commentManagerLV2"],
        name: json["name"],
        reasonName: json["reasonName"],
        reasonName_EN: json["reasonName_EN"],
        managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
        managerLv1LastnameTh: json["managerLV1_lastname_TH"],
        managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
        managerLv1LastnameEn: json["managerLV1_lastname_EN"],
        managerLv1Email: json["managerLV1_email"],
        managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
        managerLv2LastnameTh: json["managerLV2_lastname_TH"],
        managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
        managerLv2LastnameEn: json["managerLV2_lastname_EN"],
        managerLv2Email: json["managerLV2_email"],
        startText: json["startText"],
        endText: json["endText"],
        createDateText: json["createDateText"],
        workDateText: json["workDateText"],
        managerLv1ApproveDateText: json["managerLV1ApproveDateText"],
        managerLv2ApproveDateText: json["managerLV2ApproveDateText"],
      );

  Map<String, dynamic> toJson() => {
        "idRequestTime": idRequestTime,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "workDate": workDate?.toIso8601String(),
        "idRequestReason": idRequestReason,
        "idRequestType": idRequestType,
        "otherReason": otherReason,
        "idEmployees": idEmployees,
        "isManagerLV1Approve": isManagerLv1Approve,
        "isManagerLV2Approve": isManagerLv2Approve,
        "amountHours": amountHours,
        "xOT": xOt,
        "xOTHoliday": xOtHoliday,
        "xWorkingDailyHoliday": xWorkingDailyHoliday,
        "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
        "isActive": isActive,
        "managerLV1ApproveBy": managerLv1ApproveBy,
        "managerLV1ApproveDate": managerLv1ApproveDate,
        "managerLV2ApproveBy": managerLv2ApproveBy,
        "managerLV2ApproveDate": managerLv2ApproveDate,
        "RequestTimecol": requestTimecol,
        "createDate": createDate?.toIso8601String(),
        "isDoubleApproval": isDoubleApproval,
        "approvalLevel": approvalLevel,
        "fillInCreate": fillInCreate,
        "fillInApproveLV1": fillInApproveLv1,
        "fillInApproveLV2": fillInApproveLv2,
        "isWithdraw": isWithdraw,
        "payShift": payShift,
        "commentManagerLV1": commentManagerLv1,
        "commentManagerLV2": commentManagerLv2,
        "name": name,
        "reasonName": reasonName,
        "reasonName_EN": reasonName_EN,
        "managerLV1_firstname_TH": managerLv1FirstnameTh,
        "managerLV1_lastname_TH": managerLv1LastnameTh,
        "managerLV1_firstname_EN": managerLv1FirstnameEn,
        "managerLV1_lastname_EN": managerLv1LastnameEn,
        "managerLV1_email": managerLv1Email,
        "managerLV2_firstname_TH": managerLv2FirstnameTh,
        "managerLV2_lastname_TH": managerLv2LastnameTh,
        "managerLV2_firstname_EN": managerLv2FirstnameEn,
        "managerLV2_lastname_EN": managerLv2LastnameEn,
        "managerLV2_email": managerLv2Email,
        "startText": startText,
        "endText": endText,
        "createDateText": createDateText,
        "workDateText": workDateText,
        "managerLV1ApproveDateText": managerLv1ApproveDateText,
        "managerLV2ApproveDateText": managerLv2ApproveDateText,
      };
}
