import 'dart:convert';
import '../../domain/entities/entities.dart';

PayrollSettingModel payrollSettingModelFromJson(String str) => PayrollSettingModel.fromJson(json.decode(str));
String payrollSettingModelToJson(PayrollSettingModel data) => json.encode(data.toJson());
class PayrollSettingModel extends PayrollSettingEntity{
  const PayrollSettingModel({
    required int? idPayrollSetting,
    required int? idCompany,
    required double? xWorkingDailyHoliday,
    required double? xWorkingMonthlyHoliday,
    required double? xOt,
    required double? xOtHoliday,
    required double? morningShiftFee,
    required double? afternoonShiftFee,
    required double? nightShiftFee,
    required int? delayTimes,
    required dynamic decimalRounding,
    required dynamic decimalNumber,
    required dynamic paymentRound,
    required dynamic firstCutRoundDate,
    required dynamic firstCutOff,
    required dynamic firstCutOffNextMonth,
    required dynamic secondCutOff,
    required dynamic firstRoundOt,
    required dynamic firstRoundLateAbsentLeave,
    required dynamic firstPayDate,
    required dynamic firstPayDateNextMonth,
    required dynamic secondPayDate,
    required dynamic earlyCheckIn,
    required dynamic isLeavePayResign,
    required int? firstPayslipDate,
    required String? firstPayslipTime,
    required dynamic firstPayslipNextMonth,
    required dynamic fitstPaysilpPublicType,
    required dynamic secondPayslipDate,
    required dynamic secondPayslipTime,
    required dynamic firstAddition,
    required dynamic secondAddition,
    required dynamic firstDeduction,
    required dynamic secondDeduction,
    required int? isPayShift,
    required dynamic lateDockSalary,
    required dynamic lateSso,
    required dynamic lateTax,
    required dynamic latePf,
    required dynamic absentDockSalary,
    required dynamic absentSso,
    required dynamic absentTax,
    required dynamic absentPf,
    required dynamic calculateOt,
    required dynamic otSso,
    required dynamic otTax,
    required dynamic otPf,
    required dynamic calculateShiftFee,
    required dynamic shiftFeeSso,
    required dynamic shiftFeeTax,
    required dynamic shiftFeePf,
    required dynamic calculateDiligence,
    required dynamic diligenceMethod,
    required dynamic diligenceSso,
    required dynamic diligenceTax,
    required dynamic diligencePf,
    required List<dynamic>? payment,
  }):super(
    idPayrollSetting:idPayrollSetting,
    idCompany:idCompany,
    xWorkingDailyHoliday:xWorkingDailyHoliday,
    xWorkingMonthlyHoliday:xWorkingMonthlyHoliday,
    xOt:xOt,
    xOtHoliday:xOtHoliday,
    morningShiftFee:morningShiftFee,
    afternoonShiftFee:afternoonShiftFee,
    nightShiftFee:nightShiftFee,
    delayTimes:delayTimes,
    decimalRounding:decimalRounding,
    decimalNumber:decimalNumber,
    paymentRound:paymentRound,
    firstCutRoundDate:firstCutRoundDate,
    firstCutOff:firstCutOff,
    firstCutOffNextMonth:firstCutOffNextMonth,
    secondCutOff:secondCutOff,
    firstRoundOt:firstRoundOt,
    firstRoundLateAbsentLeave:firstRoundLateAbsentLeave,
    firstPayDate:firstPayDate,
    firstPayDateNextMonth:firstPayDateNextMonth,
    secondPayDate:secondPayDate,
    earlyCheckIn:earlyCheckIn,
    isLeavePayResign:isLeavePayResign,
    firstPayslipDate:firstPayslipDate,
    firstPayslipTime:firstPayslipTime,
    firstPayslipNextMonth:firstPayslipNextMonth,
    fitstPaysilpPublicType:fitstPaysilpPublicType,
    secondPayslipDate:secondPayslipDate,
    secondPayslipTime:secondPayslipTime,
    firstAddition:firstAddition,
    secondAddition:secondAddition,
    firstDeduction:firstDeduction,
    secondDeduction:secondDeduction,
    isPayShift:isPayShift,
    lateDockSalary:lateDockSalary,
    lateSso:lateSso,
    lateTax:lateTax,
    latePf:latePf,
    absentDockSalary:absentDockSalary,
    absentSso:absentSso,
    absentTax:absentTax,
    absentPf:absentPf,
    calculateOt:calculateOt,
    otSso:otSso,
    otTax:otTax,
    otPf:otPf,
    calculateShiftFee:calculateShiftFee,
    shiftFeeSso:shiftFeeSso,
    shiftFeeTax:shiftFeeTax,
    shiftFeePf:shiftFeePf,
    calculateDiligence:calculateDiligence,
    diligenceMethod:diligenceMethod,
    diligenceSso:diligenceSso,
    diligenceTax:diligenceTax,
    diligencePf:diligencePf,
    payment:payment,
  );

  factory PayrollSettingModel.fromJson(Map<String, dynamic> json) => PayrollSettingModel(
    idPayrollSetting: json["idPayrollSetting"],
    idCompany: json["idCompany"],
    xWorkingDailyHoliday: json["xWorkingDailyHoliday"]?.toDouble(),
    xWorkingMonthlyHoliday: json["xWorkingMonthlyHoliday"]?.toDouble(),
    xOt: json["xOT"]?.toDouble(),
    xOtHoliday: json["xOTHoliday"]?.toDouble(),
    morningShiftFee: json["morningShiftFee"]?.toDouble(),
    afternoonShiftFee: json["afternoonShiftFee"]?.toDouble(),
    nightShiftFee: json["nightShiftFee"]?.toDouble(),
    delayTimes: json["delayTimes"],
    decimalRounding: json["decimalRounding"],
    decimalNumber: json["decimalNumber"],
    paymentRound: json["paymentRound"],
    firstCutRoundDate: json["firstCutRoundDate"],
    firstCutOff: json["firstCutOff"],
    firstCutOffNextMonth: json["firstCutOffNextMonth"],
    secondCutOff: json["secondCutOff"],
    firstRoundOt: json["firstRoundOt"],
    firstRoundLateAbsentLeave: json["firstRoundLateAbsentLeave"],
    firstPayDate: json["firstPayDate"],
    firstPayDateNextMonth: json["firstPayDateNextMonth"],
    secondPayDate: json["secondPayDate"],
    earlyCheckIn: json["earlyCheckIn"],
    isLeavePayResign: json["isLeavePayResign"],
    firstPayslipDate: json["firstPayslipDate"],
    firstPayslipTime: json["firstPayslipTime"],
    firstPayslipNextMonth: json["firstPayslipNextMonth"],
    fitstPaysilpPublicType: json["fitstPaysilpPublicType"],
    secondPayslipDate: json["secondPayslipDate"],
    secondPayslipTime: json["secondPayslipTime"],
    firstAddition: json["firstAddition"],
    secondAddition: json["secondAddition"],
    firstDeduction: json["firstDeduction"],
    secondDeduction: json["secondDeduction"],
    isPayShift: json["isPayShift"],
    lateDockSalary: json["lateDockSalary"],
    lateSso: json["lateSso"],
    lateTax: json["lateTax"],
    latePf: json["latePf"],
    absentDockSalary: json["absentDockSalary"],
    absentSso: json["absentSso"],
    absentTax: json["absentTax"],
    absentPf: json["absentPf"],
    calculateOt: json["calculateOt"],
    otSso: json["otSso"],
    otTax: json["otTax"],
    otPf: json["otPf"],
    calculateShiftFee: json["calculateShiftFee"],
    shiftFeeSso: json["shiftFeeSso"],
    shiftFeeTax: json["shiftFeeTax"],
    shiftFeePf: json["shiftFeePf"],
    calculateDiligence: json["calculateDiligence"],
    diligenceMethod: json["diligenceMethod"],
    diligenceSso: json["diligenceSso"],
    diligenceTax: json["diligenceTax"],
    diligencePf: json["diligencePf"],
    payment: json["payment"] == null ? [] : List<dynamic>.from(json["payment"]!.map((x) => x)),
  );

  Map<String, dynamic> toJson() => {
    "idPayrollSetting": idPayrollSetting,
    "idCompany": idCompany,
    "xWorkingDailyHoliday": xWorkingDailyHoliday,
    "xWorkingMonthlyHoliday": xWorkingMonthlyHoliday,
    "xOT": xOt,
    "xOTHoliday": xOtHoliday,
    "morningShiftFee": morningShiftFee,
    "afternoonShiftFee": afternoonShiftFee,
    "nightShiftFee": nightShiftFee,
    "delayTimes": delayTimes,
    "decimalRounding": decimalRounding,
    "decimalNumber": decimalNumber,
    "paymentRound": paymentRound,
    "firstCutRoundDate": firstCutRoundDate,
    "firstCutOff": firstCutOff,
    "firstCutOffNextMonth": firstCutOffNextMonth,
    "secondCutOff": secondCutOff,
    "firstRoundOt": firstRoundOt,
    "firstRoundLateAbsentLeave": firstRoundLateAbsentLeave,
    "firstPayDate": firstPayDate,
    "firstPayDateNextMonth": firstPayDateNextMonth,
    "secondPayDate": secondPayDate,
    "earlyCheckIn": earlyCheckIn,
    "isLeavePayResign": isLeavePayResign,
    "firstPayslipDate": firstPayslipDate,
    "firstPayslipTime": firstPayslipTime,
    "firstPayslipNextMonth": firstPayslipNextMonth,
    "fitstPaysilpPublicType": fitstPaysilpPublicType,
    "secondPayslipDate": secondPayslipDate,
    "secondPayslipTime": secondPayslipTime,
    "firstAddition": firstAddition,
    "secondAddition": secondAddition,
    "firstDeduction": firstDeduction,
    "secondDeduction": secondDeduction,
    "isPayShift": isPayShift,
    "lateDockSalary": lateDockSalary,
    "lateSso": lateSso,
    "lateTax": lateTax,
    "latePf": latePf,
    "absentDockSalary": absentDockSalary,
    "absentSso": absentSso,
    "absentTax": absentTax,
    "absentPf": absentPf,
    "calculateOt": calculateOt,
    "otSso": otSso,
    "otTax": otTax,
    "otPf": otPf,
    "calculateShiftFee": calculateShiftFee,
    "shiftFeeSso": shiftFeeSso,
    "shiftFeeTax": shiftFeeTax,
    "shiftFeePf": shiftFeePf,
    "calculateDiligence": calculateDiligence,
    "diligenceMethod": diligenceMethod,
    "diligenceSso": diligenceSso,
    "diligenceTax": diligenceTax,
    "diligencePf": diligencePf,
    "payment": payment == null ? [] : List<dynamic>.from(payment!.map((x) => x)),
  };
}