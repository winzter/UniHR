import 'dart:convert';
import '../../domain/entities/entities.dart';

List<LeaveModel> leaveModelFromJson(String str) =>
    List<LeaveModel>.from(json.decode(str).map((x) => LeaveModel.fromJson(x)));

String leaveModelToJson(List<LeaveModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class LeaveModel extends LeaveEntity {
  const LeaveModel({
    required int? idLeave,
    required int? idLeaveType,
    required String? description,
    required dynamic filename,
    required DateTime? start,
    required DateTime? end,
    required int? idEmployees,
    required double? used,
    required double? quota,
    required double? balance,
    required double? remaining,
    required double? carry,
    required int? idManager,
    required DateTime? approveDate,
    required dynamic isApprove,
    required int? isFullDay,
    required dynamic workingStart,
    required dynamic workingEnd,
    required int? isActive,
    required dynamic fillInApprove,
    required DateTime? createDate,
    required dynamic isWithdraw,
    required dynamic commentManager,
    required dynamic idHoliday,
    required dynamic ccEmail,
    required dynamic idManagerGroup,
    required String? name,
    required String? name_EN,
    required String? titleTh,
    required String? firstnameTh,
    required String? lastnameTh,
    required int? idCompany,
    required String? positionName,
    required String? departmentName,
    required String? managerFirstnameTh,
    required String? managerLastnameTh,
    required dynamic holidayName,
    required String? managerFirstnameEn,
    required String? managerLastnameEn,
    required String? managerEmail,
    required String? startText,
    required String? endText,
    required dynamic approveDateText,
    required String? createDateText,
  }) : super(
          idLeave: idLeave,
          idLeaveType: idLeaveType,
          description: description,
          filename: filename,
          start: start,
          end: end,
          idEmployees: idEmployees,
          used: used,
          quota: quota,
          balance: balance,
          remaining: remaining,
          carry: carry,
          idManager: idManager,
          approveDate: approveDate,
          isApprove: isApprove,
          isFullDay: isFullDay,
          workingStart: workingStart,
          workingEnd: workingEnd,
          isActive: isActive,
          fillInApprove: fillInApprove,
          createDate: createDate,
          isWithdraw: isWithdraw,
          commentManager: commentManager,
          idHoliday: idHoliday,
          ccEmail: ccEmail,
          idManagerGroup: idManagerGroup,
          name: name,
          name_EN: name_EN,
          titleTh: titleTh,
          firstnameTh: firstnameTh,
          lastnameTh: lastnameTh,
          idCompany: idCompany,
          positionName: positionName,
          departmentName: departmentName,
          managerFirstnameTh: managerFirstnameTh,
          managerLastnameTh: managerLastnameTh,
          holidayName: holidayName,
          managerFirstnameEn: managerFirstnameEn,
          managerLastnameEn: managerLastnameEn,
          managerEmail: managerEmail,
          startText: startText,
          endText: endText,
          approveDateText: approveDateText,
          createDateText: createDateText,
        );

  factory LeaveModel.fromJson(Map<String, dynamic> json) => LeaveModel(
        idLeave: json["idLeave"],
        idLeaveType: json["idLeaveType"],
        description: json["description"],
        filename: json["filename"],
        start: json["start"] == null ? null : DateTime.parse(json["start"]),
        end: json["end"] == null ? null : DateTime.parse(json["end"]),
        idEmployees: json["idEmployees"],
        used: json["used"]?.toDouble(),
        quota: json["quota"]?.toDouble(),
        balance: json["balance"]?.toDouble(),
        remaining: json["remaining"]?.toDouble(),
        carry: json["carry"]?.toDouble(),
        idManager: json["idManager"],
        approveDate: json["approveDate"] == null
            ? null
            : DateTime.parse(json["approveDate"]),
        isApprove: json["isApprove"],
        isFullDay: json["isFullDay"],
        workingStart: json["workingStart"],
        workingEnd: json["workingEnd"],
        isActive: json["isActive"],
        fillInApprove: json["fillInApprove"],
        createDate: json["createDate"] == null
            ? null
            : DateTime.parse(json["createDate"]),
        isWithdraw: json["isWithdraw"],
        commentManager: json["commentManager"],
        idHoliday: json["idHoliday"],
        ccEmail: json["cc_email"],
        idManagerGroup: json["idManagerGroup"],
        name: json["name"],
        name_EN: json["name_EN"],
        titleTh: json["title_TH"],
        firstnameTh: json["firstname_TH"],
        lastnameTh: json["lastname_TH"],
        idCompany: json["idCompany"],
        positionName: json["positionName"],
        departmentName: json["departmentName"],
        managerFirstnameTh: json["manager_firstname_TH"],
        managerLastnameTh: json["manager_lastname_TH"],
        holidayName: json["holidayName"],
        managerFirstnameEn: json["manager_firstname_EN"],
        managerLastnameEn: json["manager_lastname_EN"],
        managerEmail: json["manager_email"],
        startText: json["startText"],
        endText: json["endText"],
        approveDateText: json["approveDateText"],
        createDateText: json["createDateText"],
      );

  Map<String, dynamic> toJson() => {
        "idLeave": idLeave,
        "idLeaveType": idLeaveType,
        "description": description,
        "filename": filename,
        "start": start?.toIso8601String(),
        "end": end?.toIso8601String(),
        "idEmployees": idEmployees,
        "used": used,
        "quota": quota,
        "balance": balance,
        "remaining": remaining,
        "carry": carry,
        "idManager": idManager,
        "approveDate": approveDate,
        "isApprove": isApprove,
        "isFullDay": isFullDay,
        "workingStart": workingStart,
        "workingEnd": workingEnd,
        "isActive": isActive,
        "fillInApprove": fillInApprove,
        "createDate": createDate?.toIso8601String(),
        "isWithdraw": isWithdraw,
        "commentManager": commentManager,
        "idHoliday": idHoliday,
        "cc_email": ccEmail,
        "idManagerGroup": idManagerGroup,
        "name": name,
        "name_EN": name_EN,
        "title_TH": titleTh,
        "firstname_TH": firstnameTh,
        "lastname_TH": lastnameTh,
        "idCompany": idCompany,
        "positionName": positionName,
        "departmentName": departmentName,
        "manager_firstname_TH": managerFirstnameTh,
        "manager_lastname_TH": managerLastnameTh,
        "holidayName": holidayName,
        "manager_firstname_EN": managerFirstnameEn,
        "manager_lastname_EN": managerLastnameEn,
        "manager_email": managerEmail,
        "startText": startText,
        "endText": endText,
        "approveDateText": approveDateText,
        "createDateText": createDateText,
      };
}
